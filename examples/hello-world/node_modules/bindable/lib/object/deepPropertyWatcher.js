// Generated by CoffeeScript 1.6.2
(function() {
  var PropertyWatcher, dref, poolParty, propertyWatcher;

  dref = require("dref");

  poolParty = require("poolparty");

  PropertyWatcher = (function() {
    /*
    */
    function PropertyWatcher(options) {
      this.reset(options);
    }

    /*
    */


    PropertyWatcher.prototype.reset = function(options) {
      if (options.property) {
        options.path = options.property.split(".");
      }
      this.index = options.index || 0;
      this._fullPath = options.path;
      this._path = this._fullPath.slice(0, this.index);
      this._property = this._path.join(".");
      this.target = options.target;
      this.callback = options.callback;
      return this._watch();
    };

    /*
    */


    PropertyWatcher.prototype._dispose = function() {
      if (this._listener) {
        this._listener.dispose();
        this._listener = void 0;
      }
      if (this._binding) {
        this._binding.dispose();
        this._binding = void 0;
      }
      if (this._child) {
        this._child.dispose();
        return this._child = void 0;
      }
    };

    /*
    */


    PropertyWatcher.prototype.dispose = function() {
      this._dispose();
      return propertyWatcher.add(this);
    };

    /*
    */


    PropertyWatcher.prototype._watch = function() {
      var value,
        _this = this;

      value = this.target.get(this._property);
      if (this._property.length) {
        this._listener = this.target.on("change:" + this._property, function() {
          return _this._changed();
        });
      }
      if (value && value.__isBindable) {
        return this._binding = propertyWatcher.create({
          target: value,
          path: this._fullPath.slice(this.index),
          callback: (function() {
            return _this._changed();
          })
        });
      } else if (this._path.length < this._fullPath.length) {
        return this._child = propertyWatcher.create({
          target: this.target,
          path: this._fullPath,
          callback: this.callback,
          index: this.index + 1
        });
      }
    };

    /*
    */


    PropertyWatcher.prototype._changed = function() {
      this._dispose();
      this._watch();
      return this.callback();
    };

    return PropertyWatcher;

  })();

  propertyWatcher = module.exports = poolParty({
    max: 100,
    factory: function(options) {
      return new PropertyWatcher(options);
    },
    recycle: function(watcher, options) {
      return watcher.reset(options);
    }
  });

}).call(this);
