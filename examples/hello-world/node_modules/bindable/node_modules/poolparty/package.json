{
  "name": "poolparty",
  "version": "0.0.2",
  "description": "",
  "main": "./lib/index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha --reporter min"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/classdojo/poolparty.js.git"
  },
  "devDependencies": {
    "mocha": "1.8.x",
    "expect.js": "0.2.x",
    "structr": "*"
  },
  "author": "",
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "5ea0f204528d657f05c7f27782c4d6a6384819f9",
  "readme": "### Object Pooling & Recycling\n\n\n### Motiviation\n\n- The reduce the overhead of instantiating many objects which have a short lifecycle.\n  - see `bindable.js`\n\n\n\nFirst create an object that you want to add to the pool party:\n\n```coffeescript\nclass BasicView extends EventEmitter\n  \n  ###\n  ###\n\n  reset: (@options) ->\n\n\n```\n\nNext, setup the pool party:\n\n```coffeescript\nvar BasicView = require \"./basicView\"\nvar objectPool = require(\"poolparty\")({\n\n  max: 50,\n  keepAliveTimeout: 1000 * 10\n\n  # the function that creates the basic views\n  create: (options) ->\n    view = new BasicView()\n    view.reset options\n\n  # the function that resets each recycled view\n  recycle: (view, options) ->\n    view.reset options\n});\n\n\n#create a \nvar basicView = objectPool.create({ name: \"craig\" });\n\n#or explicitly add the object back in the object pool\nobjectPool.add(basicView);\n```\n\n\n### API\n\n#### pool poolparty(options)\n\n- `max` - the max number of objects allowed in a pool\n- `min` - minimum number of items to use in the pool\n- `keepAliveTimeout` - the number of MS before destroying a stale object\n- `factory` - the function which creates a pool object\n- `recycle` - called whenever an object is recycled\n\n\n### pool.size()\n\nreturns the size of the pool\n\n### pool.drip()\n\nremoves one item from the pool\n\n### pool.drain()\n\nremoves all items from the pool except the min\n\n### object pool.add(item)\n\nAdds an object to the pool\n\n### object pool.create(options)\n\ncreates, or uses a recycled object\n\n\n### object.dispose()\n\ndisposes the object, and adds it back to the object pool\n\n\n\n",
  "_id": "poolparty@0.0.2",
  "_from": "poolparty@0.0.x"
}
