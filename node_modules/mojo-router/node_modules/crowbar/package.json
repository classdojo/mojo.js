{
  "name": "crowbar",
  "version": "0.2.2",
  "description": "HTTP Router for Mojo.js",
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha --ui tdd"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mojo-js/crowbar.js"
  },
  "keywords": [
    "mojo-plugin",
    "router"
  ],
  "author": "",
  "license": "BSD",
  "readmeFilename": "README.md",
  "testling": {
    "files": [
      "./node_modules/es5-shim/es5-shim.js",
      "./node_modules/es5-shim/es5-sham.js",
      "test/*-test.js"
    ],
    "harness": "mocha-tdd",
    "browsers": [
      "ie/7..latest",
      "firefox/3.5",
      "firefox/latest",
      "chrome/latest",
      "safari/latest",
      "opera/latest"
    ]
  },
  "dependencies": {
    "protoclass": "0.0.x",
    "bindable": "0.6.x",
    "mocha": "1.15.1",
    "underscore": "1.6.0",
    "async": "0.7.x",
    "comerr": "0.0.x",
    "toarray": "0.0.1",
    "mediocre": "0.1.x",
    "hasher": "1.2.0",
    "outcome": "0.0.18"
  },
  "devDependencies": {
    "expect.js": "0.3.1",
    "sinon": "1.9.1",
    "istanbul": "0.2.7",
    "testling": "1.6.1",
    "es5-shim": "3.0.2",
    "express": "^4.6.1",
    "request": "^2.37.0"
  },
  "readme": "Crowbar HTTP Router [![Alt ci](https://travis-ci.org/classdojo/crowbar.js.png)](https://travis-ci.org/classdojo/mojo-router)\n\n[![Testling](https://ci.testling.com/classdojo/crowbar.js.png)](https://ci.testling.com/classdojo/crowbar.js)\n\nCrowbar is a flexible routing system inspired by [express](http://expressjs.com/), and [director](https://github.com/flatiron/director). \n\n### Example\n\n```javascript\nvar router = require(\"crowbar\")();\n\nfunction auth (location, next) {\n  // authenticate here\n}\n\nrouter.param(\"classroom\", function (location, next) {\n  // load classroom\n  next(null, classroom);\n});  \n\nrouter.add({\n  enter: auth,\n  \"/classes/:classroom\": {\n    \"/reports\": {\n      enter: function (location, next) {\n        // do stuff with route\n      }\n    }\n  }\n});\n\nrouter.redirect(\"/classes/classid/reports\", function (err, location) {\n  console.log(location.get(\"params.classroom\")); // classroom model\n  console.log(location.get(\"pathname\")); // /classes/classid/reports\n  console.log(location.get(\"url\")); // same as pathname, but also includes query params\n});\n```\n\n#### Entering Routes\n\nCalled when a route is entered.\n\n```javascript\nrouter.add({\n  \"/home\": {\n    enter: function (location, next) {\n      // do stuff\n      next(); // continue\n    }\n  }\n});\n\nrouter.redirect(\"/home\", function (err, location) {\n\n});\n```\n\nYou can also specify multiple enter handlers:\n\n```javascript\nrouter.add({\n  \"/home\": {\n    enter: [auth, function (location, next) {\n      // do stuff\n      next(); // continue\n    }]\n  }\n});\n```\n\n## API\n\n\n#### Exiting Routes\n\nUseful if you want to teardown a route before entering another.\n\n```javascript\nrouter.add({\n  \"/contact\": {\n    exit: function (location, next) {\n      next();\n    },\n    enter: function (location, next) {\n      next();\n    }\n  },\n  \"/home\": {\n    enter: function (location, next) {\n      next(); // continue\n    }\n  }\n});\n\nrouter.redirect(\"/contact\");\nrouter.redirect(\"/home\"); // exit handler called\n```\n\nJust like enter handlers, you can specify multiple exit handlers\n\n#### Route States\n\nStates are properties set by the router which may modify your application state. This is used specifically in mojo.js.\n\n```javascript\nrouter.add({\n  \"/classes/:classroom\": {\n    states: { app: \"classes\" },\n    \"/reports\": {\n      states: { classes: \"reports\" }\n    }\n  }\n});\n\nrouter.bind(\"location.states\", function (states) {\n  // { app: \"classes\", classes: \"reports\" }\n});\n\nrouter.redirect(\"/classes/classid/reports\");\n```\n\n#### Parameters\n\nJust like express.js, you have the ability to create parameter loaders.\n\n```javascript\nrouter.param(\"classroom\", function (location, next) {\n  console.log(\"location.params.classroom\"); // classid\n  next(null, classroomModel);\n});\n\nrouter.add({\n  \"/classes/:classroom\": {}\n});\n\nrouter.redirect(\"/classes/classid\", function (err, location) {\n  console.log(location.get(\"params.classroom\")); // classroomModel\n})\n```\n\n#### Naming Routes\n\n```javascript\nrouter.add({\n  \"/classes/:classroom\": {\n    name: \"classroom\"\n  }\n});\n\nrouter.redirect(\"classroom\", {\n  params: {\n    classroom: \"classid\"\n  }\n}, function (err, location) {\n\n});\n```\n\n### listeners\n\nKubrick comes with an HTTP listener by default, which is loaded automatically in the browser.\n\n#### router.redirect(pathnameOrRouteName[, options], complete)\n\n- `pathnameOrRouteName` - pathname or route name to redirect to\n- `options` - route name options\n  - `query` - route query\n  - `params` - route params\n- `complete` - called when redirected\n\n#### router.add(routes)\n\nadds new routes to the router\n\n#### router.use(plugins...)\n\nadds plugins to the router\n\n#### router.location\n\nThe current location of the router\n\n```javascript\nrouter.bind(\"location\", function () {\n  // called whenever the location changes\n});\n```\n\n#### Routes router.routes\n\nRoutes property\n\n#### routes.find(query)\n\nFinds a route based on the query.\n\n```javascript\nrouter.add({\n  \"/home\": {\n    name: \"homeRoute\"\n  }\n});\n\nconsole.log(router.routes.find({ pathname: \"/home\" })); // /home route\nconsole.log(router.routes.find({ pathname: \"homeRoutek \" })); // /home route\n```\n\n#### location.query\n\nquery parameters on the location. Note that if the query changes, those changes will also be reflected in the HTTP url.\n\n```javascript\nrouter.bind(\"location\", function (err, location) {\n  console.log(location.get(\"query.hello\")); // blah\n  location.set(\"query.hello\", \"world\"); // gets reflected in the HTTP url\n});\n\nrouter.redirect(\"/home?hello=blah\");\n```\n\n#### location.params\n\nsimilar to `location.query`. `location.params` are taken from the route parameters.\n\n#### location.url\n\npathname + query params.\n\n```javascript\nrouter.bind(\"location\", function (err, location) {\n  console.log(location.get(\"url\")); // /home?hello=blah\n});\n\nrouter.redirect(\"/home?hello=blah\");\n```\n\n#### location.pathname\n\njust the pathname of the location\n\n#### location.equals(location)\n\nreturns TRUE of the both locations are the same\n\n#### location.redirect(pathname, options)\n\nredirects the location\n\n## Mojo.js Usage\n\nbasic usage:\n\n```javascript\nvar mojo = require(\"mojojs\"),\napp = new mojo.Application();\napp.use(require(\"crowbar\"));\n\napp.router.add({\n  \"/home\": { }\n});\n```\n",
  "gitHead": "a48e38000af7987bd20b70ebafd72cc5fe1a8fce",
  "bugs": {
    "url": "https://github.com/mojo-js/crowbar.js/issues"
  },
  "homepage": "https://github.com/mojo-js/crowbar.js",
  "_id": "crowbar@0.2.2",
  "_shasum": "02909a5fdf384e02b9efc75f01521a29ab1a867c",
  "_from": "crowbar@0.2.x"
}
