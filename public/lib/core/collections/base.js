// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["../bindings/eventEmitter", "underscore", "./bindings/glue", "dref"], function(EventEmitter, _, Glue, dref) {
    var BaseCollection, generateId, _id;
    _id = 0;
    generateId = function() {
      return _id++;
    };
    return BaseCollection = (function(_super) {

      __extends(BaseCollection, _super);

      /*
      */


      function BaseCollection(source) {
        BaseCollection.__super__.constructor.call(this);
        this._source = source || [];
        this._itemsById = {};
      }

      /*
      */


      BaseCollection.prototype.clone = function(bind) {
        var clone;
        clone = new this.prototype.constructor();
        if (bind !== false) {
          this.bindTo(clone);
        }
        return clone;
      };

      /*
      */


      BaseCollection.prototype.length = function() {
        return this._source.length;
      };

      /*
      */


      BaseCollection.prototype.glue = function(target) {
        return new Glue(this, target);
      };

      /*
      */


      BaseCollection.prototype.glueFrom = function(source, context) {
        return new Glue(source, this, context);
      };

      /*
      */


      BaseCollection.prototype.source = function(value) {
        if (value instanceof BaseCollection) {
          value.glue(this);
          return this;
        }
        if (!arguments.length) {
          return this._source.concat();
        }
        return this._emit("reset", {
          oldSource: this._source,
          source: this._source = this._addChildren(value)
        });
      };

      /*
      */


      BaseCollection.prototype._addChildren = function(source) {
        var i, item, transformed, _i, _len;
        transformed = [];
        for (i = _i = 0, _len = source.length; _i < _len; i = ++_i) {
          item = source[i];
          transformed.push(this._addItem(item, i));
        }
        return transformed;
      };

      /*
      */


      BaseCollection.prototype.addItems = function(source) {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = source.length; _i < _len; _i++) {
          item = source[_i];
          _results.push(this.addItem(item));
        }
        return _results;
      };

      /*
      */


      BaseCollection.prototype.addItem = function(item) {
        return this.addItemAt(item, this._source.length);
      };

      /*
      */


      BaseCollection.prototype.getItemAt = function(index) {
        return this._source[index];
      };

      /*
      */


      BaseCollection.prototype.getItemIndex = function(item) {
        return this._source.indexOf(item);
      };

      /*
      */


      BaseCollection.prototype.addItemAt = function(item, index) {
        if (!dref.get(item, "_id")) {
          dref.set(item, "_id", generateId());
        }
        if (this._itemsById[dref.get(item, "_id")]) {
          return false;
        }
        item = this._addItem(item, index);
        this._itemsById[dref.get(item, "_id")] = item;
        this._source.splice(index, 0, item);
        return this._emit("add", {
          item: item,
          index: index + 1,
          _id: dref.get(item, "_id")
        });
      };

      /*
      */


      BaseCollection.prototype.removeItem = function(item) {
        return this.removeItemAt(this._source.indexOf(item));
      };

      /*
      */


      BaseCollection.prototype.removeItemAt = function(index) {
        var item;
        if (!~index) {
          return false;
        }
        item = this._source[index];
        delete this._itemsById[dref.get(item, "_id")];
        this._removeItem(item);
        this._source.splice(index, 1);
        return this._emit("remove", {
          item: item,
          index: index,
          _id: dref.get(item, "_id")
        });
      };

      /*
      */


      BaseCollection.prototype.removeItemById = function(id) {
        var item;
        item = this._itemsById[id];
        if (!item) {
          return false;
        }
        return this.removeItem(item);
      };

      /*
      */


      BaseCollection.prototype._emit = function(type, data) {
        this.emit(type, data);
        return this.emit("updated", _.extend({
          type: type
        }, data));
      };

      /*
      */


      BaseCollection.prototype._addItem = function(item, index) {
        return item;
      };

      BaseCollection.prototype._removeItem = function(item, index) {
        return item;
      };

      return BaseCollection;

    })(EventEmitter);
  });

}).call(this);
