// Generated by CoffeeScript 1.6.2
/*
templates.use(i 8n)
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "asyngleton", "events", "../utils/async"], function($, _, asyngleton, events, async) {
    var Translator, translator;

    Translator = (function(_super) {
      __extends(Translator, _super);

      /*
      */


      function Translator() {
        this.options = {
          language: navigator.language,
          directory: "/i18n"
        };
        this._translations = {};
      }

      /*
      */


      Translator.prototype.translate = function(string) {
        return this.t(string);
      };

      /*
      */


      Translator.prototype.t = function(string) {
        var translated;

        translated = this._translations[string];
        if (!translated) {
          this.emit("missingTranslation", string);
        }
        return translated || string;
      };

      /*
       Loads the translation strings
      */


      Translator.prototype.load = asyngleton(function(callback) {
        var load,
          _this = this;

        load = [this.options.language, this.options.language.split("-").shift()];
        return async.eachSeries(load, (function(lang, next) {
          return $.ajax({
            url: "" + _this.options.directory + "/" + (lang.toLowerCase()) + ".json",
            type: "GET",
            dataType: "json",
            success: function(content) {
              _.extend(_this._translations, content);
              return next();
            },
            error: function() {
              return next();
            },
            callback: function() {}
          });
        }), callback);
      });

      return Translator;

    })(events.EventEmitter);
    translator = new Translator();
    return {
      load: function(name, req, onLoad) {
        return translator.load(function() {
          return onLoad(translator);
        });
      }
    };
  });

}).call(this);
