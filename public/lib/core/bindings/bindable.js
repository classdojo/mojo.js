// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./eventTree", "./binding", "events", "dref"], function(EventTree, Binding, events, dref) {
    var Bindable;
    return Bindable = (function(_super) {

      __extends(Bindable, _super);

      /*
      */


      function Bindable(data) {
        this.data = data != null ? data : {};
        this._emitter = new EventTree();
      }

      /*
      */


      Bindable.prototype.get = function(key) {
        if (!key) {
          return this.data;
        }
        return dref.get(this.data, key);
      };

      /*
      */


      Bindable.prototype.has = function(key) {
        return !!this.get(key);
      };

      /*
      */


      Bindable.prototype.set = function(key, value) {
        if (arguments.length === 1) {
          this.data = value;
        } else {
          dref.set(this.data, key, value);
        }
        this._emitter.emit(key);
        return this.emit("update", {
          key: key,
          value: value
        });
      };

      /*
           called immediately
      */


      Bindable.prototype.bind = function(property, listener) {
        if (arguments.length === 1) {
          listener = property;
          property = void 0;
        }
        return this._emitter.on(property, new Binding(this, property, listener).listener);
      };

      return Bindable;

    })(events.EventEmitter);
  });

}).call(this);
