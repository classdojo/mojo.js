// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./binding", "./glue", "./eventEmitter", "dref"], function(Binding, Glue, EventEmitter, dref) {
    var Bindable;
    dref.use({
      test: function(item) {
        return item.get && item.set;
      },
      get: function(item, key) {
        return item.data[key] || item[key];
      },
      set: function(item, key, value) {
        return item.set(key, value);
      }
    });
    return Bindable = (function(_super) {

      __extends(Bindable, _super);

      /*
      */


      function Bindable(data) {
        this.data = data != null ? data : {};
        Bindable.__super__.constructor.call(this, {
          wildcard: true
        });
      }

      /*
      */


      Bindable.prototype.get = function(key) {
        return this._ref(this.data, key);
      };

      /*
      */


      Bindable.prototype.has = function(key) {
        return !!this.get(key);
      };

      /*
      */


      Bindable.prototype.set = function(key, value) {
        if (arguments.length === 1) {
          this.data = value;
        } else {
          dref.set(this.data, key, value);
        }
        this.emit("change:" + key, value);
        return this.emit("change", value);
      };

      /*
           binds a property to a listener. This is called immediately if there's a value
      */


      Bindable.prototype.bind = function(property, listener) {
        return new Binding(this, property, listener);
      };

      /*
           Glues two bindable items together
      */


      Bindable.prototype.glue = function(fromProperty, to, toProperty) {
        if (arguments.length === 2) {
          toProperty = to;
          to = this;
        }
        return new Glue(this, fromProperty, to, toProperty);
      };

      /*
      */


      Bindable.prototype._ref = function(context, key) {
        if (!key) {
          return context;
        }
        return dref.get(context, key);
      };

      return Bindable;

    })(EventEmitter);
  });

}).call(this);
