// Generated by CoffeeScript 1.4.0

/*
 creates a tree that's bindable

 tree = new EventTree();

 tree.on(function() {
  
 });

 tree.on("name.first", function() {
    
 });

 tree.emit("name", { first: "craig" });
*/


(function() {

  define(["dolce"], function(dolce) {
    var EventTree;
    EventTree = (function() {
      /*
      */

      function EventTree(parent) {
        this.parent = parent;
        this._listeners = [];
        this._leafs = {};
      }

      /*
      */


      EventTree.prototype.emit = function(key, value) {
        var leaf;
        leaf = this._findLeafs(key).pop();
        console.log(leaf);
        return leaf._emit(key);
      };

      /*
      */


      EventTree.prototype._emit = function(value) {
        var leafName, listener, _i, _len, _ref, _results;
        _ref = this._listeners;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          listener(value);
        }
        _results = [];
        for (leafName in this._leafs) {
          _results.push(this._leafs[leafName]._emit(value));
        }
        return _results;
      };

      /*
      */


      EventTree.prototype.on = function(key, value) {
        if (arguments.length === 1) {
          value = key;
          key = void 0;
        }
        return this._findLeaf(key)._addListener(value);
      };

      /*
      */


      EventTree.prototype.once = function(key, value) {
        var disposable;
        return disposable = this.on(key, function() {
          disposable.dispose();
          return value.apply(this, arguments);
        });
      };

      /*
      */


      EventTree.prototype._findLeaf = function(key) {
        return this._findLeafs(key).pop();
      };

      /*
      */


      EventTree.prototype._findLeafs = function(key) {
        var current, keyParts, leafs;
        keyParts = key ? key.split(".") : [];
        current = this;
        leafs = [current];
        while (keyParts.length) {
          leafs.push(current = current._leaf(keyParts.shift()));
        }
        return leafs;
      };

      /*
      */


      EventTree.prototype._leaf = function(name) {
        return this._leafs[name] || (this._leafs[name] = new EventTree(this));
      };

      /*
      */


      EventTree.prototype._addListener = function(value) {
        var _this = this;
        this._listeners.push(value);
        return {
          dispose: function() {
            var i;
            i = _this._listeners.indexOf(value);
            if (!~i) {
              return;
            }
            return _this._listeners.splice(i, 1);
          }
        };
      };

      return EventTree;

    })();
    return EventTree;
  });

}).call(this);
