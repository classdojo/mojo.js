// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "dref", "events", "../models/base", "../bindings/bindable", "outcome", "underscore", "../utils/compose", "./decor/facade", "rivets"], function($, dref, events, Bindable, outcome, _, compose, ViewDecorator, rivets) {
    var BaseView;
    rivets.configure({
      adapter: {
        subscribe: function(obj, keypath, callback) {
          return obj.on("change:" + keypath.replace(/,/g, "."), callback);
        },
        unsubscribe: function(obj, keypath, callback) {
          return obj.off("change:" + keypath.replace(/,/g, "."), callback);
        },
        read: function(obj, keypath) {
          return obj.get(keypath.replace(/,/g, "."));
        },
        publish: function(obj, keypath, value) {
          return obj.set(keypath.replace(/,/g, "."), value);
        }
      }
    });
    return BaseView = (function(_super) {

      __extends(BaseView, _super);

      /*
      */


      function BaseView(options) {
        if (options == null) {
          options = {};
        }
        this.rerender = __bind(this.rerender, this);

        BaseView.__super__.constructor.call(this, options);
        this.decorator = new ViewDecorator(this);
        this._o = outcome.e(this);
        this.init();
        this.set("initialized", true);
      }

      /*
           override key so the view data can be fetched as well. Makes it a bit easier extending
           a view class.
      */


      BaseView.prototype.get = function(key) {
        return BaseView.__super__.get.call(this, key) || this._ref(this, key);
      };

      /*
      */


      BaseView.prototype.init = function() {
        this.set("data.view", this);
        if (this._initialized) {
          throw new Error("already initialized");
        }
        return this._initialized = true;
      };

      /*
           returns a search for a particular element
      */


      BaseView.prototype.$ = function(search) {
        var _ref;
        return (_ref = this.element) != null ? _ref.find(search) : void 0;
      };

      /*
           attaches to an element
      */


      BaseView.prototype.attach = function(selectorOrElement, callback) {
        var _this = this;
        if (callback == null) {
          callback = (function() {});
        }
        this.element = typeof selectorOrElement === "string" ? $(selectorOrElement) : selectorOrElement;
        this.selector = selectorOrElement;
        return this.decorator.setup(this._o.e(callback).s(function() {
          callback();
          _this._attached();
          return rivets.bind(_this.element, {
            data: _this
          });
        }));
      };

      /*
           re-renders an element
      */


      BaseView.prototype.rerender = function(callback) {
        if (callback == null) {
          callback = function() {};
        }
        callback = this._fixCallback(callback);
        if (!this.selector) {
          return callback();
        }
        return this.attach(this.selector, callback);
      };

      /*
      */


      BaseView.prototype._attached = function() {};

      /*
      */


      BaseView.prototype.remove = function(callback) {
        var _this = this;
        if (callback == null) {
          callback = (function() {});
        }
        callback = this._fixCallback(callback);
        if (!this.element) {
          return callback();
        }
        return this.decorator.teardown(this._o.e(callback).s(function() {
          _this.element.unbind("*");
          _this.element.html("");
          callback();
          return _this.emit("removed");
        }));
      };

      /*
           Fixes the callback incase it's not a function
      */


      BaseView.prototype._fixCallback = function(callback) {
        if (typeof callback !== "function") {
          callback = (function() {});
        }
        return callback;
      };

      return BaseView;

    })(Bindable);
  });

}).call(this);
