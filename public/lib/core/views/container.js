// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["require", "./base", "../collections/concrete", "underscore", "async"], function(require, BaseView, Collection, _, async) {
    var ContainerView;
    return ContainerView = (function(_super) {

      __extends(ContainerView, _super);

      /*
      */


      function ContainerView(options) {
        this.options = options != null ? options : {};
        this._attachChild = __bind(this._attachChild, this);

        this._onChildrenUpdated = __bind(this._onChildrenUpdated, this);

        ContainerView.__super__.constructor.call(this, options);
        _.defaults(options, {
          childrenElement: ".children",
          childElement: "div"
        });
        this.children = new Collection();
        this.children.source(this.options.children || []);
      }

      /*
      */


      ContainerView.prototype.attach = function(selector, callback) {
        var _this = this;
        if (callback == null) {
          callback = (function() {});
        }
        return ContainerView.__super__.attach.call(this, selector, function() {
          if (!_this._listening) {
            _this._listening = true;
            _this.children.on("updated", _this._onChildrenUpdated);
          }
          return _this._attachChildren(callback);
        });
      };

      /*
      */


      ContainerView.prototype._onChildrenUpdated = function(event) {
        return this["_" + event.type](event);
      };

      /*
      */


      ContainerView.prototype._reset = function(event) {
        return this._attachChildren();
      };

      /*
      */


      ContainerView.prototype._replace = function(event) {
        throw new Error("cannot replace right now");
      };

      /*
      */


      ContainerView.prototype._remove = function(event) {
        var $el;
        $el = $(this._childElement().children()[event.index]);
        return $el.detach();
      };

      /*
      */


      ContainerView.prototype._add = function(event) {
        return this._attachChild(event.item);
      };

      /*
      */


      ContainerView.prototype._attachChildren = function(callback) {
        this._childElement().children().unbind("*");
        this._childElement().html("");
        return async.forEach(this.children.source(), this._attachChild, callback);
      };

      /*
      */


      ContainerView.prototype._attachChild = function(child, callback) {
        if (callback == null) {
          callback = (function() {});
        }
        return child.attach(this._childElement().append("<" + this.options.childElement + " />").children().last());
      };

      /*
      */


      ContainerView.prototype._childElement = function() {
        if (this.options.childrenElement) {
          return this.$(this.options.childrenElement);
        } else {
          return this.element;
        }
      };

      return ContainerView;

    })(BaseView);
  });

}).call(this);
