// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["require", "./base", "../collections/concrete", "underscore", "async"], function(require, BaseView, Collection, _, async) {
    var ContainerView;
    return ContainerView = (function(_super) {

      __extends(ContainerView, _super);

      function ContainerView() {
        return ContainerView.__super__.constructor.apply(this, arguments);
      }

      /*
      */


      ContainerView.prototype.childrenElement = ".children";

      /*
      */


      ContainerView.prototype.childElement = "div";

      /*
      */


      ContainerView.prototype.init = function() {
        var childrenSource, sourceSource;
        ContainerView.__super__.init.call(this);
        childrenSource = this.get("children");
        sourceSource = this.get("source");
        this.children = this._createChildren();
        this.children.glueFrom(childrenSource || [], this);
        this.source = this._createSource();
        return this.source.glueFrom(sourceSource || [], this);
      };

      /*
      */


      ContainerView.prototype._childElement = function() {
        if (this.get("childrenElement")) {
          return this.$(this.get("childrenElement"));
        } else {
          return this.element;
        }
      };

      /*
      */


      ContainerView.prototype._createSource = function() {
        return new Collection();
      };

      /*
      */


      ContainerView.prototype._createChildren = function() {
        return new Collection();
      };

      return ContainerView;

    })(BaseView);
  });

}).call(this);
