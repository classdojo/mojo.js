// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./state", "bindable", "stepc", "pilot-block", "../sectionable/decor", "../../collection"], function(State, bindable, stepc, pilot, Decor, ViewCollection) {
    return (function(_super) {
      __extends(_Class, _super);

      /*
      */


      function _Class() {
        this._setIndex = __bind(this._setIndex, this);
        this.prev = __bind(this.prev, this);
        this.next = __bind(this.next, this);
        var _this = this;

        _Class.__super__.constructor.apply(this, arguments);
        this.source = new bindable.Collection();
        this.source.enforceId(false);
        this.source.reset((this.options.views || this.options).map(function(stateOptions) {
          return new State(_this, stateOptions);
        }));
        this.set("index", this.options.index || 0);
        this.selector = this.options.selector;
        this.rotate = this.options.rotate || false;
      }

      /*
      */


      _Class.prototype._load = function(callback) {
        this.bind("index", this._setIndex);
        return this.bind("currentView").once().to(callback);
      };

      /*
      */


      _Class.prototype.render = function(callback) {
        return this._currentView.render(callback);
      };

      /*
      */


      _Class.prototype.display = function(callback) {
        return this._currentView.display(callback);
      };

      /*
      */


      _Class.prototype.remove = function(callback) {
        return this._currentView.remove(callback);
      };

      /*
       selects a state
      */


      _Class.prototype.select = function(stateOrIndex) {
        var i;

        if (typeof stateOrIndex === "number") {
          return this.set("index", stateOrIndex);
        } else {
          i = this.source.indexOf(stateOrIndex);
          if (~i) {
            return this.select(i);
          }
        }
      };

      /*
       Moves onto the next state
      */


      _Class.prototype.next = function() {
        return this.move();
      };

      /*
       Moves to the previous state
      */


      _Class.prototype.prev = function() {
        return this.move(-1);
      };

      /*
      */


      _Class.prototype.move = function(position) {
        var newIndex;

        if (position == null) {
          position = 1;
        }
        newIndex = this.get("index") + position;
        if (newIndex < 0) {
          if (this.rotate) {
            newIndex = this.source.length() - 1;
          } else {
            newIndex = 0;
            this.emit("ended");
          }
        } else if (newIndex >= this.source.length()) {
          if (this.rotate) {
            newIndex = 0;
          } else {
            newIndex = this.source.length() - 1;
            this.emit("ended");
          }
        }
        return this.set("index", newIndex);
      };

      /*
      */


      _Class.prototype._setIndex = function(index) {
        var newStateView, oldState, oldView, self, state, _ref;

        if (!this.source.length()) {
          return;
        }
        if ((_ref = this.currentState) != null) {
          _ref.set("selected", false);
        }
        oldState = this.currentState;
        self = this;
        state = this.currentState = this.source.at(index || 0);
        newStateView = state.getView();
        this.view.linkChild(newStateView);
        this.currentState.set("selected", true);
        oldView = self._currentView;
        return stepc.async((function() {
          return newStateView[self.view.get("currentState")].call(newStateView, this);
        }), (function() {
          if (oldState != null) {
            oldState.hide();
          }
          return this();
        }), (function(err) {
          if (err) {
            console.error(err);
          }
          self._currentView = newStateView;
          self.section.append(newStateView.section);
          self.currentState.show();
          return self.set("currentView", newStateView);
        }));
      };

      /*
      */


      _Class.prototype.emit = function() {
        var _ref;

        _Class.__super__.emit.apply(this, arguments);
        arguments[0] = this.name + "." + arguments[0];
        return (_ref = this.view).bubble.apply(_ref, arguments);
      };

      return _Class;

    })(Decor);
  });

}).call(this);
