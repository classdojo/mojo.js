// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./base", "outcome", "../../utils/async", "bindable", "../../factories/class", "../../templates/factory"], function(BaseViewDecorator, outcome, async, bindable, ClassFactory, templates) {
    var ListChildrenDecorator;
    ListChildrenDecorator = (function(_super) {

      __extends(ListChildrenDecorator, _super);

      function ListChildrenDecorator() {
        this._removeChild = __bind(this._removeChild, this);

        this._insertChild = __bind(this._insertChild, this);
        return ListChildrenDecorator.__super__.constructor.apply(this, arguments);
      }

      /*
      */


      ListChildrenDecorator.prototype.load = function(callback) {
        var binding, children, factory,
          _this = this;
        this._children = children = this.view.get("children");
        if (this.view.get("source")) {
          binding = this.view.get("source").bind();
          if (this.view.get("childViewClass")) {
            factory = new ClassFactory(this.view.get("childViewClass"));
            binding.transform(function(item) {
              return factory.createItem(item);
            });
          }
          binding.to(this._children);
        }
        return async.eachSeries(this._children.source(), (function(child, next) {
          return _this._loadChild(child, next);
        }), outcome.e(callback).s(function() {
          _this._children.on({
            insert: _this._insertChild,
            remove: _this._removeChild
          });
          return callback.apply(_this, arguments);
        }));
      };

      /*
      */


      ListChildrenDecorator.prototype.attach = function(callback) {
        var _this = this;
        return async.eachSeries(this._children.source(), (function(child, next) {
          return _this._addChild(child, next);
        }), callback);
      };

      /*
      */


      ListChildrenDecorator.prototype.remove = function(callback) {
        return async.eachSeries(this._children.source(), (function(child, next) {
          return child.remove(next);
        }), callback);
      };

      /*
      */


      ListChildrenDecorator.prototype._insertChild = function(item, index) {
        return this._addChild(item);
      };

      /*
      */


      ListChildrenDecorator.prototype._removeChild = function(item, index) {
        return console.log("REMOVE CHILD TODO");
      };

      /*
      */


      ListChildrenDecorator.prototype._addChild = function(child, next) {
        var _this = this;
        if (next == null) {
          next = (function() {});
        }
        if (this._loading) {
          return;
        }
        return this._loadChild(child, function() {
          child.attach(_this._childrenElement().append(child.get("parentTplContent")).children().last());
          return next();
        });
      };

      /*
      */


      ListChildrenDecorator.prototype._loadChild = function(child, callback) {
        var template,
          _this = this;
        if (child.has("parentTplContent")) {
          return callback();
        }
        if (this.view.get("childTemplate")) {
          template = this.view.get("childTemplate");
        } else if (this.view.get("childElement")) {
          template = templates.fromSource("<" + (this.view.get("childElement")) + " />");
        }
        return template.render(child.get(), outcome.e(callback).s(function(content) {
          child.set("parentTplContent", content);
          return child.load(callback);
        }));
      };

      /*
      */


      ListChildrenDecorator.prototype._childrenElement = function() {
        if (!this.view.has("childrenElement")) {
          return this.view.element;
        }
        return this.view.$(this.view.get("childrenElement"));
      };

      return ListChildrenDecorator;

    })(BaseViewDecorator);
    ListChildrenDecorator.test = function(view) {
      return view.has("children") && view.get("children")._events;
    };
    return ListChildrenDecorator;
  });

}).call(this);
