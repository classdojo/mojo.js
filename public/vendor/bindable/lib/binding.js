define(["require", "/vendor/bindable/lib/setters/factory.js"], function(require) {

    var __dirname = "/vendor/bindable/lib",
    __filename    = "/vendor/bindable/lib/binding.js",
    module        = { exports: {} },
    exports       = module.exports,
    define        = undefined,
    window        = exports;

    

    // Generated by CoffeeScript 1.4.0
(function() {
  var BindableSetter, bindableSetter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BindableSetter = require("/vendor/bindable/lib/setters/factory.js");

  bindableSetter = new BindableSetter();

  /*
   Glues stuff together
  */


  module.exports = (function() {
    /*
    */

    _Class.prototype.__isBinding = true;

    /*
    */


    function _Class(from, property) {
      this.from = from;
      this.property = property;
      this._trigger = __bind(this._trigger, this);

      this._limit = -1;
      this._setters = [];
      this._triggerCount = 0;
      this._listen();
    }

    /*
       binds to a target
    */


    _Class.prototype.to = function(target, property) {
      var setter;
      setter = bindableSetter.createSetter(this, target, property);
      if (setter) {
        this._setters.push(setter);
      }
      return this;
    };

    /*
       runs the binding just once
    */


    _Class.prototype.once = function() {
      return this.limit(0);
    };

    /*
       limits the number of times the binding can be called
    */


    _Class.prototype.limit = function(count) {
      this._limit = count;
      return this;
    };

    /*
       returns whether the binding is bound with ways
    */


    _Class.prototype.isBothWays = function() {
      return !!this._boundBothWays;
    };

    /*  
     makes the binding go both ways.
    */


    _Class.prototype.bothWays = function() {
      var setter, _i, _len, _ref;
      if (this._boundBothWays) {
        return this;
      }
      this._boundBothWays = true;
      _ref = this._setters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        setter = _ref[_i];
        setter.bothWays();
      }
      return this;
    };

    /*
       removes the binding
    */


    _Class.prototype.dispose = function() {
      var setter, _i, _len, _ref;
      _ref = this._setters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        setter = _ref[_i];
        setter.dispose();
      }
      this._setters = [];
      if (this._listener) {
        this._listener.dispose();
      }
      this._listener = void 0;
      return this;
    };

    /*
       triggers the binding *if* it exists
    */


    _Class.prototype._trigger = function() {
      var setter, value, _i, _len, _ref;
      value = this.from.get(this.property);
      _ref = this._setters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        setter = _ref[_i];
        setter.change(value);
      }
      if (~this._limit && ++this._triggerCount > this._limit) {
        this.dispose();
      }
      return this;
    };

    /*
    */


    _Class.prototype._listen = function() {
      var event, keyParts;
      keyParts = this.property.split(".");
      event = "change:" + (keyParts.shift()) + ".**";
      return this._listener = this.from.on(event, this._trigger);
    };

    return _Class;

  })();

}).call(this);


    return module.exports;
});