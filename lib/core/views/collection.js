// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["bindable", "asyngleton", "flatstack"], function(bindable, asyngleton, flatstack) {
    var DecorCollection;

    return DecorCollection = (function(_super) {
      __extends(DecorCollection, _super);

      /*
      */


      function DecorCollection() {
        this._loadLateDecor = __bind(this._loadLateDecor, this);        DecorCollection.__super__.constructor.apply(this, arguments);
        this.enforceId(false);
        this._callstack = flatstack(this);
        this.on("insert", this._loadLateDecor);
      }

      /*
       Creates, and parses the DOM
      */


      DecorCollection.prototype.load = asyngleton(function(callback) {
        return this._call("load", "loaded", this.source(), callback);
      });

      /*
       attaches any controllers / bindings to the view (rivets)
      */


      DecorCollection.prototype.render = asyngleton(function(callback) {
        var _this = this;

        return this.load(function() {
          return _this._call("render", "rendered", _this.source(), callback);
        });
      });

      /*
       adds the elements to the DOM - transitions happen here
      */


      DecorCollection.prototype.display = asyngleton(function(callback) {
        var _this = this;

        return this.render(function() {
          return _this._call("display", "displayed", _this.source(), callback);
        });
      });

      /*
       removes & unloads the view
      */


      DecorCollection.prototype.remove = asyngleton(function(callback) {
        var _this = this;

        return this.display(function() {
          return _this._call("remove", "removed", _this.source(), callback);
        });
      });

      /*
      */


      DecorCollection.prototype.emit = function() {
        var _ref;

        DecorCollection.__super__.emit.apply(this, arguments);
        return (_ref = this.view) != null ? _ref.emit.apply(_ref, arguments) : void 0;
      };

      /*
      */


      DecorCollection.prototype._call = function(method, event, source, callback) {
        var done, src,
          _this = this;

        if (callback == null) {
          callback = (function() {});
        }
        if (this.get("currentState") !== method) {
          this.set("currentState", method);
          this.emit(method);
        }
        done = function() {
          return _this._callPending(method, event, callback);
        };
        src = source.concat().map(function(decor) {
          return {
            fn: decor[method] || _this._noFn,
            context: decor
          };
        });
        this._callstack.push.apply(this._callstack, src);
        return this._callstack.push(done);
      };

      /*
      */


      DecorCollection.prototype._noFn = function() {};

      /*
       calls any late decorators
      */


      DecorCollection.prototype._callPending = function(method, event, callback) {
        var pending;

        if (!this._pending) {
          this.set(event, true);
          this.emit(event);
          callback();
          return;
        }
        pending = this._pending;
        this._pending = void 0;
        return this._call(method, event, pending, callback);
      };

      /*
       used when a decorator is added a bit late - might happen
       for items such as states, lists, or dynamically loaded decor (child views)
      */


      DecorCollection.prototype._loadLateDecor = function(decorator) {
        if (!(this.has("currentState") || this.get("currentState") === "none")) {
          return;
        }
        if (this.get("displayed")) {
          if (typeof decorator.display === "function") {
            decorator.display();
          }
          return;
        }
        if (!this._pending) {
          this._pending = [];
        }
        return this._pending.push(decorator);
      };

      return DecorCollection;

    })(bindable.Collection);
  });

}).call(this);
