// Generated by CoffeeScript 1.6.2
(function() {
  var State, StatesView, bindable, flatstack, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  State = require("./state");

  flatstack = require("flatstack");

  /*
  */


  StatesView = (function(_super) {
    __extends(StatesView, _super);

    function StatesView() {
      this._setIndex = __bind(this._setIndex, this);
      this._setName = __bind(this._setName, this);
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      this._setViews = __bind(this._setViews, this);      _ref = StatesView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    StatesView.prototype._decorated = true;

    /*
    */


    StatesView.prototype.define = ["currentName", "index", "source", "currentView", "rotate", "ended", "views"];

    /*
    */


    StatesView.prototype.ended = false;

    /*
    */


    StatesView.prototype.initialize = function(data) {
      var source;

      source = new bindable.Collection();
      this.set("source", source);
      StatesView.__super__.initialize.call(this, data);
      return this.bind("views", this._setViews).now();
    };

    /*
    */


    StatesView.prototype._setViews = function(views) {
      var _this = this;

      this.source.reset(views.map(function(stateOptions, i) {
        return new State(_this, stateOptions, i);
      }));
      if (this._rendered) {
        return this._rebind();
      }
    };

    /*
    */


    StatesView.prototype.render = function() {
      var sect;

      sect = StatesView.__super__.render.call(this);
      this._rebind();
      return sect;
    };

    /*
    */


    StatesView.prototype._rebind = function() {
      var _ref1, _ref2;

      if ((_ref1 = this._indexBinding) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = this._cnameBinding) != null) {
        _ref2.dispose();
      }
      this._indexBinding = this.bind("index", this._setIndex).now();
      return this._cnameBinding = this.bind("currentName", this._setName).now();
    };

    /*
     selects a state
    */


    StatesView.prototype.select = function(stateOrIndex) {
      var i;

      if (typeof stateOrIndex === "number") {
        return this.set("index", stateOrIndex);
      } else {
        i = this.source.indexOf(stateOrIndex);
        if (~i) {
          return this.select(i);
        }
      }
    };

    /*
     Moves onto the next state
    */


    StatesView.prototype.next = function() {
      return this.move();
    };

    /*
     Moves to the previous state
    */


    StatesView.prototype.prev = function() {
      return this.move(-1);
    };

    /*
    */


    StatesView.prototype.move = function(position) {
      var newIndex;

      if (position == null) {
        position = 1;
      }
      newIndex = this.get("index") + position;
      if (newIndex < 0) {
        if (this.get("rotate")) {
          newIndex = this.source.length - 1;
        } else {
          newIndex = 0;
          this.set("ended", true);
        }
      } else if (newIndex >= this.source.length) {
        if (this.get("rotate")) {
          newIndex = 0;
        } else {
          newIndex = this.source.length - 1;
          this.set("ended", true);
        }
      }
      return this.set("index", newIndex);
    };

    /*
    */


    StatesView.prototype._setName = function(name) {
      var i, state, _i, _len, _ref1, _results;

      _ref1 = this.source.source();
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        state = _ref1[i];
        if (state.get("name") === name) {
          this.set("index", i);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    /*
    */


    StatesView.prototype._setIndex = function(index) {
      var isNew, newStateView, oldState, self, state, _ref1, _ref2;

      if (!this.source.length) {
        return;
      }
      if ((_ref1 = this.currentState) != null) {
        _ref1.set("selected", false);
      }
      oldState = this.currentState;
      self = this;
      state = this.currentState = this.source.at(index || 0);
      isNew = !state.hasView();
      newStateView = state.getView();
      this.setChild("currentChild", newStateView);
      this.currentState.set("selected", true);
      if ((_ref2 = this._displayListener) != null) {
        _ref2.dispose();
      }
      if (oldState && oldState !== this.currentState) {
        oldState.remove();
      }
      state.render();
      if (isNew) {
        this.section.append(newStateView.section);
      }
      return this.set("currentView", newStateView);
    };

    return StatesView;

  })(require("../base"));

  module.exports = StatesView;

}).call(this);
