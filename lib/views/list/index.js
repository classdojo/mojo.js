// Generated by CoffeeScript 1.6.2
(function() {
  var ListView, bindable, dref, factories, hoist, janitor, type, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  type = require("type-component");

  factories = require("factories");

  hoist = require("hoist");

  dref = require("dref");

  janitor = require("janitorjs");

  /*
  */


  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      this._removeModelView = __bind(this._removeModelView, this);
      this._insertModelView = __bind(this._insertModelView, this);
      this._onSortChange = __bind(this._onSortChange, this);
      this._onSortOptionChange = __bind(this._onSortOptionChange, this);
      this._onSourceChange = __bind(this._onSourceChange, this);
      this._onSourceOptionChange = __bind(this._onSourceOptionChange, this);      _ref = ListView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    ListView.prototype.__isList = true;

    /*
    */


    ListView.prototype.define = ["filter", "sort", "map", "length", "modelViewFactory", "modelViewClass", "viewClass"];

    /*
    */


    ListView.prototype.initialize = function(data) {
      ListView.__super__.initialize.call(this, data);
      this._views = new bindable.Collection();
      this._initOptions();
      this._initModelMapper();
      return this._initSourceBindings();
    };

    /*
    */


    ListView.prototype._render = function() {
      var _ref1, _ref2, _ref3;

      ListView.__super__._render.call(this);
      if ((_ref1 = this._viewBinding) != null) {
        _ref1.dispose();
      }
      if ((_ref2 = this._sourceBinding) != null) {
        _ref2.dispose();
      }
      if ((_ref3 = this._sortBinding) != null) {
        _ref3.dispose();
      }
      this._viewBinding = this._views.bind({
        insert: this._insertModelView,
        remove: this._removeModelView
      }).now();
      this._sourceBinding = this.bind("source").to(this._onSourceOptionChange).now();
      return this._sortBinding = this.bind("sort").to(this._onSortOptionChange).now();
    };

    /*
    */


    ListView.prototype._initOptions = function() {
      if (this.modelViewFactory) {
        return this._modelViewFactory = factories.factory.create(this.modelViewFactory);
      }
    };

    /*
    */


    ListView.prototype._initModelMapper = function() {
      var hoister, modelViewFactory, _ref1, _ref2,
        _this = this;

      modelViewFactory = (_ref1 = this._modelViewFactory) != null ? _ref1 : factories["class"]((_ref2 = this.modelViewClass) != null ? _ref2 : this.viewClass);
      hoister = this._mapModel = hoist();
      if (this.map) {
        hoister.map(function(model) {
          return _this.map(model, _this);
        });
      }
      return hoister.map(function(model) {
        var ops, _ref3;

        ops = {};
        ops.model = model;
        if (!(model != null ? typeof model.get === "function" ? model.get("_id") : void 0 : void 0)) {
          if (model != null) {
            if (typeof model.set === "function") {
              model.set("_id", Date.now() + "_" + Math.random() * 999999);
            }
          }
        }
        ops._id = (_ref3 = model != null ? typeof model.get === "function" ? model.get("_id") : void 0 : void 0) != null ? _ref3 : model != null ? model._id : void 0;
        return ops;
      }).map(function(options) {
        var view;

        view = modelViewFactory.create(options);
        view.set("_id", options._id);
        return view;
      });
    };

    /*
    */


    ListView.prototype._initSourceBindings = function() {
      return this._views.bind("length").to(this, "length").now();
    };

    /*
    */


    ListView.prototype._onSourceOptionChange = function(source) {
      var _ref1;

      this._strSource = source;
      if ((_ref1 = this._sourceOptionBinding) != null) {
        _ref1.dispose();
      }
      this._sourceOptionBinding = void 0;
      if (type(source) === "string") {
        return this._sourceOptionBinding = this.bind(source).to(this._onSourceChange).now();
      } else {
        return this._onSourceChange(source);
      }
    };

    /*
    */


    ListView.prototype._onSourceChange = function(_source) {
      var binding, _ref1,
        _this = this;

      if (type(_source) === "array") {
        _source = new bindable.Collection(_source);
      }
      this._source = _source;
      this._views.source([]);
      this._deferredSections = [];
      if ((_ref1 = this._sourceJanitor) != null) {
        _ref1.dispose();
      }
      if (!_source) {
        return;
      }
      this._sourceJanitor = janitor();
      this._sourceJanitor.add(this._sourceBinding = binding = _source.bind());
      if (this.filter) {
        this._sourceBinding.filter(function(model) {
          _this._sourceJanitor.add(_this._watchModelChanges(model));
          return _this.filter(model, _this);
        });
      }
      return binding.map(this._mapModel).to(this._views).now();
    };

    /*
    */


    ListView.prototype._onSortOptionChange = function(sort) {
      var _ref1;

      if ((_ref1 = this._sortOptionBinding) != null) {
        _ref1.dispose();
      }
      if (type(sort) === "string") {
        return this._sortOptionBinding = this.bind(sort).to(this._onSortChange).now();
      } else {
        return this._onSortChange(sort);
      }
    };

    /*
    */


    ListView.prototype._onSortChange = function(sort) {
      this._sort = sort;
      return this._resort();
    };

    /*
    */


    ListView.prototype._watchModelChanges = function(model) {
      var onChange,
        _this = this;

      return model.on("change", onChange = function() {
        return _this._refilter([model]);
      });
    };

    /*
    */


    ListView.prototype._refilter = function(models) {
      var containsModel, model, modelIndex, useModel, _i, _len;

      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        useModel = !!this.filter(model, this);
        modelIndex = this._views.indexOf({
          _id: model.get("_id")
        });
        containsModel = !!~modelIndex;
        if (useModel === containsModel) {
          continue;
        }
        if (useModel) {
          this._views.push(this._mapModel(model));
        } else {
          this._views.splice(modelIndex, 1);
        }
      }
      return this._resort();
    };

    /*
    */


    ListView.prototype._insertModelView = function(modelView, index) {
      this.setChild(index, modelView);
      modelView.render();
      this.section.append(modelView.section.toFragment());
      return this._resort();
    };

    /*
    */


    ListView.prototype._removeModelView = function(modelView) {
      return modelView.dispose();
    };

    /*
    */


    ListView.prototype.dispose = function() {
      var _ref1, _ref2;

      ListView.__super__.dispose.call(this);
      if ((_ref1 = this._sourceOptionBinding) != null) {
        _ref1.dispose();
      }
      return (_ref2 = this._sourceJanitor) != null ? _ref2.dispose() : void 0;
    };

    /*
    */


    ListView.prototype._resort = function() {
      var frag, sorted, view, _i, _len;

      if (!this._sort) {
        return;
      }
      frag = [];
      sorted = this._views.source().sort(this._sort);
      for (_i = 0, _len = sorted.length; _i < _len; _i++) {
        view = sorted[_i];
        frag.push(view.section.toFragment());
      }
      return this.section.append(this.application.nodeFactory.createFragment(frag));
    };

    return ListView;

  })(require("../base"));

  module.exports = ListView;

}).call(this);
