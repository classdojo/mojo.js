// Generated by CoffeeScript 1.6.3
var Janitor, ListView, bindable, dref, factories, hoist, nofactor, type, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bindable = require("bindable");

type = require("type-component");

factories = require("factories");

hoist = require("hoist");

dref = require("dref");

nofactor = require("nofactor");

Janitor = require("../../cleanup/janitor");

ListView = (function(_super) {
  __extends(ListView, _super);

  function ListView() {
    this._removeModelView = __bind(this._removeModelView, this);
    this._insertDeferredSections = __bind(this._insertDeferredSections, this);
    this._insertModelView = __bind(this._insertModelView, this);
    this._onSourceChange = __bind(this._onSourceChange, this);
    this._onSourceOptionChange = __bind(this._onSourceOptionChange, this);
    _ref = ListView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  ListView.prototype.define = ["filter", "sort", "map", "length", "modelViewFactory", "modelViewClass", "viewClass"];

  /*
  */


  ListView.prototype._init = function() {
    ListView.__super__._init.call(this);
    this._views = new bindable.Collection();
    this._initOptions();
    this._initModelMapper();
    this._initSourceBindings();
    return this._rmCount = 0;
  };

  /*
  */


  ListView.prototype._initOptions = function() {
    var _ref1;
    this._filter = this.get("filter");
    this._sort = this.get("sort");
    this._modelViewFactory = this.get("modelViewFactory");
    this._modelViewClass = (_ref1 = this.get("modelViewClass")) != null ? _ref1 : this.get("viewClass");
    this._map = this.get("map");
    if (this._modelViewFactory) {
      return this._modelViewFactory = factories.factory(this._modelViewFactory);
    }
  };

  /*
  */


  ListView.prototype._initModelMapper = function() {
    var hoister, modelViewFactory, _ref1,
      _this = this;
    modelViewFactory = (_ref1 = this._modelViewFactory) != null ? _ref1 : factories["class"](this._modelViewClass);
    hoister = this._mapModel = hoist();
    if (this._map) {
      hoister.map(function(model) {
        return _this._map(model, _this);
      });
    }
    return hoister.map(function(model) {
      var ops, _ref2;
      ops = {};
      ops.model = model;
      if (!(model != null ? typeof model.get === "function" ? model.get("_id") : void 0 : void 0)) {
        if (model != null) {
          if (typeof model.set === "function") {
            model.set("_id", Date.now() + "_" + Math.random() * 999999);
          }
        }
      }
      ops._id = (_ref2 = model != null ? typeof model.get === "function" ? model.get("_id") : void 0 : void 0) != null ? _ref2 : model != null ? model._id : void 0;
      return ops;
    }).map(function(options) {
      var view;
      view = modelViewFactory.create(options);
      view.set("_id", options._id);
      return view;
    });
  };

  /*
  */


  ListView.prototype._initSourceBindings = function() {
    this._views.bind("length").to(this, "length").now();
    this._views.bind({
      insert: this._insertModelView,
      remove: this._removeModelView
    }).now();
    return this.bind("source").to(this._onSourceOptionChange).now();
  };

  /*
  */


  ListView.prototype._onSourceOptionChange = function(source) {
    var _ref1;
    this._strSource = source;
    if ((_ref1 = this._sourceOptionBinding) != null) {
      _ref1.dispose();
    }
    this._sourceOptionBinding = void 0;
    if (type(source) === "string") {
      return this._sourceOptionBinding = this.bind(source).to(this._onSourceChange).now();
    } else {
      return this._onSourceChange(source);
    }
  };

  /*
  */


  ListView.prototype._onSourceChange = function(_source) {
    var binding, _ref1,
      _this = this;
    this._source = _source;
    this._views.source([]);
    this._deferredSections = [];
    if ((_ref1 = this._sourceJanitor) != null) {
      _ref1.dispose();
    }
    if (!_source) {
      return;
    }
    this._sourceJanitor = new Janitor();
    this._sourceJanitor.add(this._sourceBinding = binding = _source.bind());
    if (this._filter) {
      this._sourceBinding.filter(function(model) {
        _this._sourceJanitor.add(_this._watchModelChanges(model));
        return _this._filter(model, _this);
      });
    }
    binding.map(this._mapModel).to(this._views).now();
    return this._watchViewChanges();
  };

  /*
  */


  ListView.prototype._watchModelChanges = function(model) {
    var onChange,
      _this = this;
    return model.on("change", onChange = function() {
      return _this._refilter([model]);
    });
  };

  ListView.prototype._watchViewChanges = function() {
    var property, _i, _len, _ref1, _results,
      _this = this;
    if (this._watchingViewChanges) {
      return;
    }
    if (!this._bind || !this._filter) {
      return;
    }
    this._watchingViewChanges = true;
    _ref1 = this._bind;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      property = _ref1[_i];
      _results.push((function(property) {
        return _this.bind(property).to(function() {
          return _this._refilter(_this._source.source());
        });
      })(property));
    }
    return _results;
  };

  /*
  */


  ListView.prototype._refilter = function(models) {
    var containsModel, model, modelIndex, useModel, _i, _len;
    for (_i = 0, _len = models.length; _i < _len; _i++) {
      model = models[_i];
      useModel = !!this._filter(model, this);
      modelIndex = this._views.indexOf({
        _id: model.get("_id")
      });
      containsModel = !!~modelIndex;
      if (useModel === containsModel) {
        continue;
      }
      if (useModel) {
        this._views.push(this._mapModel(model));
      } else {
        this._views.splice(modelIndex, 1);
      }
    }
    return this._resort();
  };

  /*
  */


  ListView.prototype._insertModelView = function(modelView, index) {
    this.setChild(index, modelView);
    modelView.render();
    if (this._rendered) {
      return this._deferInsert(modelView.section.toFragment());
    } else {
      this.section.append(modelView.section.toFragment());
      return this._resort();
    }
  };

  /*
  */


  ListView.prototype._deferInsert = function(section) {
    this._deferredSections.push(section);
    clearTimeout(this._deferInsertTimeout);
    return this._deferInsertTimeout = setTimeout(this._insertDeferredSections, 0);
  };

  /*
  */


  ListView.prototype._insertDeferredSections = function() {
    this.section.append(nofactor["default"].createFragment(this._deferredSections));
    this._resort();
    return this._deferredSections = [];
  };

  /*
  */


  ListView.prototype._removeModelView = function(modelView) {
    return modelView.dispose();
  };

  /*
  */


  ListView.prototype.dispose = function() {
    var _ref1, _ref2;
    ListView.__super__.dispose.call(this);
    if ((_ref1 = this._sourceOptionBinding) != null) {
      _ref1.dispose();
    }
    return (_ref2 = this._sourceJanitor) != null ? _ref2.dispose() : void 0;
  };

  /*
  */


  ListView.prototype._resort = function() {
    var frag, sorted, view, _i, _len;
    if (!this._sort) {
      return;
    }
    frag = [];
    sorted = this._views.source().sort(this._sort);
    for (_i = 0, _len = sorted.length; _i < _len; _i++) {
      view = sorted[_i];
      frag.push(view.section.toFragment());
    }
    return this.section.append(nofactor["default"].createFragment(frag));
  };

  return ListView;

})(require("../base"));

module.exports = ListView;
