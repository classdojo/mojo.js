// Generated by CoffeeScript 1.6.2
/*

Notes:

1. cstep is used so that teardown & other functions wait until the previous method is calld. For instance - 
if setup is called, then teardown immediately, then teardown MUST wait until setup is complete
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["underscore", "cstep", "../../utils/async", "../../factories/either", "../../factories/class", "../../utils/idGenerator", "outcome", "./base", "./template", "./default", "./children", "./listChildren", "./attributes", "./events", "./bindings", "./transition"], function(_, cstep, async, EitherFactory, ClassFactory, generateId, outcome, BaseViewDecorator, TemplateDecorator, DefaultDecorator, ChildrenDecorator, ListChildrenDecorator, AttributesDecorator, EventsDecorator, BindingsDecorator, TransitionDecorator) {
    var ViewDecorator, availableDecorators;

    availableDecorators = {
      "template": new ClassFactory(TemplateDecorator),
      "default": new ClassFactory(DefaultDecorator),
      "attributes": new ClassFactory(AttributesDecorator),
      "bindings": new ClassFactory(BindingsDecorator),
      "children": new EitherFactory(new ClassFactory(ChildrenDecorator), new ClassFactory(ListChildrenDecorator)),
      "events": new ClassFactory(EventsDecorator),
      "transition": new ClassFactory(TransitionDecorator)
    };
    return ViewDecorator = (function(_super) {
      __extends(ViewDecorator, _super);

      /*
      */


      function ViewDecorator(view) {
        this.view = view;
        this.init = __bind(this.init, this);
        this._id = generateId();
        this.dispose();
      }

      /*
      */


      ViewDecorator.prototype.init = function() {
        return this._addDecorators();
      };

      /*
      */


      ViewDecorator.prototype.load = function(callback) {
        this.view.emit("loadingDecorator");
        return this._callDecorFn("load", callback);
      };

      /*
      */


      ViewDecorator.prototype.attach = function(callback) {
        this.view.emit("attachingDecorator");
        return this._callDecorFn("attach", callback);
      };

      /*
      */


      ViewDecorator.prototype.remove = function(callback) {
        this.view.emit("removingDecorator");
        return this._callDecorFn("remove", callback);
      };

      /*
      */


      ViewDecorator.prototype.dispose = function() {
        var decor, _i, _len, _ref;

        if (this._decorArray) {
          _ref = this._decorArray;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            decor = _ref[_i];
            decor.dispose();
          }
        }
        this._decorArray = [];
        return this._decorators = {};
      };

      /*
      */


      ViewDecorator.prototype._callDecorFn = cstep(function(name, callback) {
        return async.eachSeries(this._decorArray, (function(decor, next) {
          return decor[name].call(decor, next);
        }), callback);
      });

      /*
      */


      ViewDecorator.prototype._addDecorators = function() {
        var factory, name, priority;

        priority = 0;
        for (name in availableDecorators) {
          priority++;
          factory = availableDecorators[name];
          if (factory.test(this.view) && !this._decorators[name]) {
            this._decorators[name] = factory.createItem(this.view);
            this._decorators[name].priority = priority;
          }
        }
        return this._decorArray = _.values(this._decorators).sort(function(a, b) {
          if (a.priority > b.priority) {
            return 1;
          } else {
            return -1;
          }
        });
      };

      return ViewDecorator;

    })(BaseViewDecorator);
  });

}).call(this);
