// Generated by CoffeeScript 1.6.2
/*

Notes:

1. cstep is used so that teardown & other functions wait until the previous method is calld. For instance - 
if setup is called, then teardown immediately, then teardown MUST wait until setup is complete
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["underscore", "cstep", "../../utils/async", "../../factories/class", "../../utils/idGenerator", "outcome", "./base", "../collection", "../../utils/compose", "./template", "./children", "./list/decorator", "./attributes", "./events", "./bindings", "./dragdrop/draggable", "./dragdrop/droppable", "./states/decorator", "./transition"], function(_, cstep, async, ClassFactory, generateId, outcome, BaseViewDecorator, ViewCollection, compose, TemplateDecorator, ChildrenDecorator, ListDecorator, AttributesDecorator, EventsDecorator, BindingsDecorator, DraggableDecorator, DroppableDecorator, StatesDecorator, TransitionDecorator) {
    var ViewDecorator, availableDecorators;

    availableDecorators = {
      "template": new ClassFactory(TemplateDecorator),
      "attributes": new ClassFactory(AttributesDecorator),
      "bindings": new ClassFactory(BindingsDecorator),
      "list": new ClassFactory(ListDecorator),
      "states": new ClassFactory(StatesDecorator),
      "children": new ClassFactory(ChildrenDecorator),
      "events": new ClassFactory(EventsDecorator),
      "transition": new ClassFactory(TransitionDecorator),
      "draggable": new ClassFactory(DraggableDecorator),
      "droppable": new ClassFactory(DroppableDecorator)
    };
    return ViewDecorator = (function(_super) {
      __extends(ViewDecorator, _super);

      /*
      */


      function ViewDecorator(view) {
        this.view = view;
        this.init = __bind(this.init, this);
        this._id = generateId();
        this._facadeCollection = new ViewCollection();
        this._facadeCollection.limit = 1;
        compose(this, this._facadeCollection, ["load", "render", "display", "remove"]);
        this.dispose();
      }

      /*
      */


      ViewDecorator.prototype.init = function() {
        return this._addDecorators();
      };

      /*
      */


      ViewDecorator.prototype.dispose = function() {
        var item, _i, _len, _ref;

        _ref = this._facadeCollection.source();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.dispose();
        }
        this._facadeCollection.reset([]);
        return this._decorators = {};
      };

      /*
      */


      ViewDecorator.prototype._addDecorators = function() {
        var decor, decorators, factory, name, priority;

        decorators = [];
        priority = 0;
        for (name in availableDecorators) {
          priority++;
          factory = availableDecorators[name];
          if (factory.test(this.view)) {
            decor = factory.createItem(this.view);
            decor.priority = priority;
            decor._id = name;
            decorators.push(decor);
          }
        }
        decorators = decorators.sort(function(a, b) {
          if (a.priority > b.priority) {
            return 1;
          } else {
            return -1;
          }
        });
        return this._facadeCollection.reset(decorators);
      };

      return ViewDecorator;

    })(BaseViewDecorator);
  });

}).call(this);
