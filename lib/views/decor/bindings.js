// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./base", "rivets", "dref"], function(BaseViewDecorator, rivets, dref) {
    var BindingsDecorator, _ref;

    rivets.configure({
      adapter: {
        subscribe: function(obj, keypath, callback) {
          return obj.bind(keypath.replace(/,/g, "."), callback);
        },
        unsubscribe: function(obj, keypath, callback) {},
        read: function(obj, keypath) {
          return obj.get(keypath.replace(/,/g, "."));
        },
        publish: function(obj, keypath, value) {
          return obj.set(keypath.replace(/,/g, "."), value);
        }
      }
    });
    rivets.formatters.negate = function(value) {
      return !value;
    };
    BindingsDecorator = (function(_super) {
      __extends(BindingsDecorator, _super);

      function BindingsDecorator() {
        _ref = BindingsDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      BindingsDecorator.prototype.init = function() {
        BindingsDecorator.__super__.init.call(this);
        return this.bindings = typeof this.options === "object" ? this.options : void 0;
      };

      /*
      */


      BindingsDecorator.prototype.load = function(callback) {
        if (this.bindings) {
          this._setupExplicitBindings();
        }
        return callback();
      };

      /*
       bindings to the elements
      */


      BindingsDecorator.prototype.render = function(callback) {
        var model, _ref1, _ref2;

        if (this.view.__bound) {
          return callback();
        }
        this.view.__bound = true;
        if (this.view.section.elements.length) {
          model = (_ref1 = (_ref2 = this.view.get("model")) != null ? _ref2 : this.view.get("item")) != null ? _ref1 : this.view;
          rivets.bind(this.view.section.elements.filter(function(el) {
            return el.nodeName !== "#comment" && el.nodeName !== "#text";
          }), {
            data: model,
            item: model,
            model: model,
            view: this.view
          });
        }
        return callback();
      };

      /*
       explicit bindings are properties from & to properties of the view controller
      */


      BindingsDecorator.prototype._setupExplicitBindings = function() {
        var bindings, key, _results;

        bindings = this.bindings;
        _results = [];
        for (key in bindings) {
          _results.push(this._setupBinding(key, bindings[key]));
        }
        return _results;
      };

      /*
      */


      BindingsDecorator.prototype._setupBinding = function(property, to) {
        var keyPart, keyParts, oldTo, options, _i, _len, _results,
          _this = this;

        keyParts = property.split(" ");
        options = {};
        if (typeof to === "function") {
          oldTo = to;
          to = function() {
            return oldTo.apply(_this.view, arguments);
          };
        }
        if (to.to) {
          options = to;
        } else {
          options = {
            to: to
          };
        }
        _results = [];
        for (_i = 0, _len = keyParts.length; _i < _len; _i++) {
          keyPart = keyParts[_i];
          options.property = keyPart;
          _results.push(this.view.bind(options));
        }
        return _results;
      };

      return BindingsDecorator;

    })(BaseViewDecorator);
    BindingsDecorator.getOptions = function(view) {
      return view.bindings || !!view.template;
    };
    return BindingsDecorator;
  });

}).call(this);
