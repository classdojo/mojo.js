// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["../collection", "underscore", "type-component"], function(ViewCollection, _, type) {
    var SelectableDecorator;

    SelectableDecorator = (function(_super) {
      __extends(SelectableDecorator, _super);

      function SelectableDecorator(view) {
        var controller, _i, _len, _ref;

        this.view = view;
        SelectableDecorator.__super__.constructor.call(this);
        this.reset(this._setupControllers());
        _ref = this.source();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          controller = _ref[_i];
          this.view.emit(this.name, controller);
        }
      }

      /*
      */


      SelectableDecorator.prototype._setupControllers = function() {
        var controller, key, keyParts, ops, options, property, selector, _controllers;

        ops = this._options();
        if (this._isSingle(ops)) {
          return [
            this._newController(_.extend(ops, {
              _name: this.name
            }))
          ];
        }
        _controllers = [];
        for (key in ops) {
          keyParts = key.split(" ");
          selector = keyParts.pop();
          property = keyParts.pop();
          options = ops[key];
          options._name = property || selector;
          options.selector = selector;
          _controllers.push(this[property || selector] = controller = this._newController(options));
        }
        return _controllers;
      };

      /*
      */


      SelectableDecorator.prototype._options = function() {
        return this.view[this.name];
      };

      /*
      */


      SelectableDecorator.prototype._newController = function(options) {
        var clazz, controller;

        clazz = this.controllerClass;
        controller = new clazz(this, options);
        this.view.set(options._name, controller);
        this.view[options.name] = controller;
        return controller;
      };

      /*
      */


      SelectableDecorator.prototype._isSingle = function(options) {
        var key, v;

        if (type(options) === "array") {
          return true;
        }
        for (key in options) {
          v = options[key];
          if (typeof v === "string") {
            return true;
          }
        }
        return false;
      };

      return SelectableDecorator;

    })(ViewCollection);
    return SelectableDecorator;
  });

}).call(this);
