// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["disposable", "./base"], function(disposable, BaseDecorator) {
    var EventsDecorator, _ref;

    EventsDecorator = (function(_super) {
      __extends(EventsDecorator, _super);

      function EventsDecorator() {
        _ref = EventsDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      EventsDecorator.prototype.render = function(callback) {
        var key, props, _i, _len, _ref1;

        _ref1 = this._properties();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          props = _ref1[_i];
          for (key in props.attributes) {
            props.element.attr(key, props.attributes[key]);
          }
        }
        return callback();
      };

      /*
      */


      EventsDecorator.prototype._properties = function() {
        var attrElement, attrs, elements, selector, _results;

        attrs = this.view.attributes;
        attrElement = this._targetElement();
        if (typeof this._firstValue(attrs) !== "object") {
          return [
            {
              element: attrElement,
              attributes: attrs
            }
          ];
        }
        elements = [];
        _results = [];
        for (selector in attrs) {
          _results.push(elements.push({
            element: attrElement.find(selector),
            attributes: attrs[selector]
          }));
        }
        return _results;
      };

      /*
      */


      EventsDecorator.prototype._firstValue = function(attrs) {
        var key;

        for (key in attrs) {
          return attrs[key];
        }
      };

      /*
      */


      EventsDecorator.prototype._targetElement = function() {
        if (!this.view.has("attributesElement")) {
          return this.view.el;
        }
        return this.view.$(this.view.get("attributesElement"));
      };

      return EventsDecorator;

    })(BaseDecorator);
    EventsDecorator.test = function(view) {
      return !!view.attributes;
    };
    return EventsDecorator;
  });

}).call(this);
