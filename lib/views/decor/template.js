// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./base", "pilot-block"], function(BaseViewDecorator, pilot) {
    var TemplateViewDecorator, _ref;

    TemplateViewDecorator = (function(_super) {
      __extends(TemplateViewDecorator, _super);

      function TemplateViewDecorator() {
        this._onDisplayed = __bind(this._onDisplayed, this);        _ref = TemplateViewDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      TemplateViewDecorator.prototype.init = function() {
        TemplateViewDecorator.__super__.init.call(this);
        return this.view.loadables.on("displayed", this._onDisplayed);
      };

      /*
      */


      TemplateViewDecorator.prototype.load = function(callback) {
        var _this = this;

        return this.view.template.render(this.templateData(), function(err, content) {
          if (err) {
            return callback(err);
          }
          _this.view.section.html(content);
          _this.view.set("html", _this.view.section.html());
          return setTimeout(callback, 0);
        });
      };

      /*
      */


      TemplateViewDecorator.prototype.render = function(callback) {
        return callback();
      };

      /*
      */


      TemplateViewDecorator.prototype.display = function(callback) {
        return callback();
      };

      /*
      */


      TemplateViewDecorator.prototype.templateData = function() {
        return {
          item: this.view.getFlatten("item"),
          section: this.view.get("section"),
          view: this.view
        };
      };

      /*
      */


      TemplateViewDecorator.prototype._onDisplayed = function() {};

      return TemplateViewDecorator;

    })(BaseViewDecorator);
    TemplateViewDecorator.test = function(view) {
      return view.template;
    };
    return TemplateViewDecorator;
  });

}).call(this);
