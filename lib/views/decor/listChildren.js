// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./base", "outcome", "../../utils/async", "bindable", "../../factories/class", "../collection", "../../templates/factory"], function(BaseViewDecorator, outcome, async, bindable, ClassFactory, Collection, templates) {
    var ListChildrenDecorator, _ref;

    ListChildrenDecorator = (function(_super) {
      __extends(ListChildrenDecorator, _super);

      function ListChildrenDecorator() {
        this._removeChild = __bind(this._removeChild, this);
        this._insertChild = __bind(this._insertChild, this);        _ref = ListChildrenDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      ListChildrenDecorator.prototype.load = function(callback) {
        var binding, factory,
          _this = this;

        this._children = new Collection(this.view.get("children"));
        if (this.view.get("source")) {
          binding = this.view.get("source").bind();
          if (this.view.get("childViewClass")) {
            factory = new ClassFactory(this.view.get("childViewClass"));
            binding.transform(function(item) {
              return factory.createItem(item);
            });
          }
          binding.to(this._children);
        }
        return this._children.load(outcome.e(callback).s(function() {
          _this._children.on({
            insert: _this._insertChild,
            remove: _this._removeChild
          });
          return callback.apply(_this, arguments);
        }));
      };

      /*
      */


      ListChildrenDecorator.prototype.render = function(callback) {
        var _this = this;

        return async.eachSeries(this._children.source(), (function(child, next) {
          return _this._addChildElement(child, outcome.e(next).s(function(element) {
            child.element(element);
            return next();
          }));
        }), outcome.e(callback).s(function() {
          return _this._children.render(callback);
        }));
      };

      /*
      */


      ListChildrenDecorator.prototype.display = function(callback) {
        var _this = this;

        return this._children.display(function() {
          _this._loaded = true;
          return callback();
        });
      };

      /*
      */


      ListChildrenDecorator.prototype._insertChild = function(item, index) {
        return this._addChild(item);
      };

      /*
      */


      ListChildrenDecorator.prototype._removeChild = function(item, index) {
        item.remove();
        return item.el.remove();
      };

      /*
      */


      ListChildrenDecorator.prototype._addChild = function(child, next) {
        var _this = this;

        if (next == null) {
          next = (function() {});
        }
        child.loadables.unshift({
          _id: "loadable",
          load: function(next) {
            return _this._addChildElement(child, outcome.e(next).s(function(element) {
              child.element(element);
              return next();
            }));
          }
        });
        if (this._loaded) {
          return child.display(next);
        }
      };

      /*
      */


      ListChildrenDecorator.prototype._addChildElement = function(child, callback) {
        var template,
          _this = this;

        if (this.view.get("childTemplate")) {
          template = this.view.get("childTemplate");
        } else if (this.view.get("childElement")) {
          template = templates.fromSource("<" + (this.view.get("childElement")) + " />");
        }
        return template.render(child.get(), outcome.e(callback).s(function(content) {
          return callback(null, _this._childrenElement().append(content).children().last());
        }));
      };

      /*
      */


      ListChildrenDecorator.prototype._childrenElement = function() {
        if (!this.view.has("childrenElement")) {
          return this.view.el;
        }
        return this.view.$(this.view.get("childrenElement"));
      };

      return ListChildrenDecorator;

    })(BaseViewDecorator);
    ListChildrenDecorator.test = function(view) {
      return view.has("children") && view.get("children").__isCollection;
    };
    return ListChildrenDecorator;
  });

}).call(this);
