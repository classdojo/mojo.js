// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["disposable", "./base", "jquery"], function(disposable, BaseDecorator, $) {
    var EventsDecorator, _ref;

    EventsDecorator = (function(_super) {
      __extends(EventsDecorator, _super);

      function EventsDecorator() {
        _ref = EventsDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      EventsDecorator.prototype.render = function(callback) {
        var e, selector;

        e = this._events();
        this._disposeBindings();
        this._disposable = disposable.create();
        for (selector in e) {
          this._addBinding(selector, e[selector]);
        }
        return callback();
      };

      /*
      */


      EventsDecorator.prototype.remove = function(callback) {
        this._disposeBindings();
        return callback();
      };

      /*
      */


      EventsDecorator.prototype._addBinding = function(selector, viewMethod) {
        var action, actions, cb, elements, selectorParts, selectors, _fn, _i, _len, _ref1,
          _this = this;

        selectorParts = selector.split(" ");
        actions = selectorParts.shift().split(/\|/g).join(" ");
        selectors = selectorParts.join(",");
        cb = function() {
          var ref;

          if (typeof viewMethod === "function") {
            ref = viewMethod;
          } else {
            ref = _this.view[viewMethod] || _this.view.get(viewMethod);
          }
          return ref.apply(_this.view, arguments);
        };
        if (!selectors.length) {
          elements = this.view.$();
        } else {
          elements = this.view.$(selectors);
        }
        elements.bind(actions.toLowerCase(), cb);
        _ref1 = actions.split(" ");
        _fn = function(action) {
          return _this._disposable.add(_this.view.on(action, function() {
            return cb.apply(this, [$.Event(action)].concat(Array.prototype.slice.call(arguments)));
          }));
        };
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          action = _ref1[_i];
          _fn(action);
        }
        return this._disposable.add(function() {
          return elements.unbind(actions, cb);
        });
      };

      /*
      */


      EventsDecorator.prototype._disposeBindings = function() {
        if (!this._disposable) {
          return;
        }
        this._disposable.dispose();
        return this._disposable = void 0;
      };

      /*
      */


      EventsDecorator.prototype._events = function() {
        return this.view.events;
      };

      return EventsDecorator;

    })(BaseDecorator);
    EventsDecorator.test = function(view) {
      return view.events;
    };
    return EventsDecorator;
  });

}).call(this);
