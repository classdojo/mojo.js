// Generated by CoffeeScript 1.6.2
(function() {
  define(["./base", "../collection", "./template", "./attributes", "./events", "./bindings", "./sections/index", "./dragdrop/draggable", "./dragdrop/droppable", "./transition", "./preload"], function(BaseViewDecorator, ViewCollection, TemplateDecorator, AttributesDecorator, EventsDecorator, BindingsDecorator, SectionsDecorator, DraggableDecorator, DroppableDecorator, TransitionDecorator, PreloadDecorator) {
    var availableDecorators, _decor;

    _decor = function(name, clazz, inheritable) {
      if (inheritable == null) {
        inheritable = true;
      }
      return {
        name: name,
        clazz: clazz,
        inheritable: inheritable
      };
    };
    /*
    loading order:
    
    1. children templates
    2. parent templates
    3. parent -> child bindings
    */

    availableDecorators = [_decor("bindings", BindingsDecorator), _decor("sections", SectionsDecorator), _decor("template", TemplateDecorator, false), _decor("preload", PreloadDecorator), _decor("attributes", AttributesDecorator), _decor("transition", TransitionDecorator), _decor("events", EventsDecorator), _decor("draggable", DraggableDecorator), _decor("droppable", DroppableDecorator)];
    return {
      /*
      */

      addDecoratorClass: function(options) {
        if (options == null) {
          options = {};
        }
        return availableDecorators.push(_decor(options.name, options["class"] || options.clazz, options.inheritable));
      },
      /*
      */

      setup: function(view) {
        if (view.constructor.prototype.__decorators) {
          return this.setDecorators(view, view.constructor.prototype.__decorators);
        } else {
          view.constructor.prototype.__decorators = this.findDecorators(view);
          return this.setup(view);
        }
      },
      /*
       Finds ALL the decorators for a view, including the parent 
       decorators which should be inherited (but overridden by the child prototype)
      */

      findDecorators: function(view) {
        var cv, decorators, pv;

        decorators = [];
        cv = view;
        pv = void 0;
        while (cv && cv.__isView) {
          decorators = decorators.concat(this._findDecorators(cv, pv).concat(this._findDecorators(cv.constructor, pv != null ? pv.constructor : void 0)));
          pv = cv;
          cv = cv.__super__;
        }
        return decorators.sort(function(a, b) {
          if (a.priority > b.priority) {
            return 1;
          } else {
            return -1;
          }
        });
      },
      /*
      */

      _findDecorators: function(proto, child) {
        var clazz, d, decorators, options, priority, _i, _len;

        decorators = [];
        for (priority = _i = 0, _len = availableDecorators.length; _i < _len; priority = ++_i) {
          d = availableDecorators[priority];
          clazz = d.clazz;
          if (child && !d.inheritable) {
            continue;
          }
          if (options = clazz.getOptions(proto)) {
            if (child && options === clazz.getOptions(child)) {
              continue;
            }
            decorators.push({
              clazz: clazz,
              name: d.name,
              options: options,
              priority: priority
            });
          }
        }
        return decorators;
      },
      /*
      */

      setDecorators: function(view, decorators) {
        var d, decor, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = decorators.length; _i < _len; _i++) {
          decor = decorators[_i];
          d = new decor.clazz(view, decor.options);
          d._id = decor.name;
          _results.push(view.decorators.push(d));
        }
        return _results;
      }
    };
  });

}).call(this);
