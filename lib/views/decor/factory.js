// Generated by CoffeeScript 1.6.2
/*

Notes:

1. cstep is used so that teardown & other functions wait until the previous method is calld. For instance - 
if setup is called, then teardown immediately, then teardown MUST wait until setup is complete
*/


(function() {
  define(["underscore", "cstep", "../../utils/async", "../../factories/class", "../../utils/idGenerator", "./base", "../collection", "../../utils/compose", "./template", "./children", "./list/decorator", "./attributes", "./events", "./bindings", "./dragdrop/draggable", "./dragdrop/droppable", "./states/decorator", "./transition"], function(_, cstep, async, ClassFactory, generateId, BaseViewDecorator, ViewCollection, compose, TemplateDecorator, ChildrenDecorator, ListDecorator, AttributesDecorator, EventsDecorator, BindingsDecorator, DraggableDecorator, DroppableDecorator, StatesDecorator, TransitionDecorator) {
    var availableDecorators, decor;

    decor = function(name, clazz) {
      return {
        name: name,
        factory: new ClassFactory(clazz)
      };
    };
    /*
    loading order:
    
    1. children templates
    2. parent templates
    3. parent -> child bindings
    */

    availableDecorators = [decor("bindings", BindingsDecorator), decor("list", ListDecorator), decor("states", StatesDecorator), decor("children", ChildrenDecorator), decor("template", TemplateDecorator), decor("attributes", AttributesDecorator), decor("transition", TransitionDecorator), decor("events", EventsDecorator), decor("draggable", DraggableDecorator), decor("droppable", DroppableDecorator)];
    return {
      setup: function(view) {
        var d, factory, name, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = availableDecorators.length; _i < _len; _i++) {
          d = availableDecorators[_i];
          factory = d.factory;
          name = d.name;
          if (factory.test(view)) {
            decor = factory.createItem(view);
            decor._id = name;
            _results.push(view.decorators.push(decor));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
  });

}).call(this);
