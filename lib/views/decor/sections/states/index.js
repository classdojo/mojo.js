// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["pilot-block", "./state", "flatstack", "bindable"], function(pilot, State, flatstack, bindable) {
  var StatesSection;

  StatesSection = (function(_super) {
    __extends(StatesSection, _super);

    /*
    */


    function StatesSection(view, name, options) {
      var _this = this;

      this.view = view;
      this.name = name;
      this.options = options;
      this._setIndex = __bind(this._setIndex, this);
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      StatesSection.__super__.constructor.call(this);
      this.source = new bindable.Collection();
      this.source.enforceId(false);
      this.source.reset((this.options.views || this.options).map(function(stateOptions, i) {
        return new State(_this, stateOptions, i);
      }));
      this.set("index", this.options.index || 0);
      this.set("source", this.source);
      this.selector = this.options.selector;
      this.rotate = this.options.rotate || false;
      this._callstack = flatstack(this);
      this.section = pilot.createSection();
    }

    /*
    */


    StatesSection.prototype.toString = function() {
      return this.section.toString();
    };

    /*
    */


    StatesSection.prototype.load = function(next) {
      this.bind("index", this._setIndex).now();
      return this.bind("currentView").once().to(next).now();
    };

    /*
    */


    StatesSection.prototype.render = function(next) {
      return this._currentView.render(next);
    };

    /*
    */


    StatesSection.prototype.display = function(next) {
      return this._currentView.display(next);
    };

    /*
    */


    StatesSection.prototype.remove = function(next) {
      return this._currentView.remove(next);
    };

    /*
     selects a state
    */


    StatesSection.prototype.select = function(stateOrIndex) {
      var i;

      if (typeof stateOrIndex === "number") {
        return this.set("index", stateOrIndex);
      } else {
        i = this.source.indexOf(stateOrIndex);
        if (~i) {
          return this.select(i);
        }
      }
    };

    /*
     Moves onto the next state
    */


    StatesSection.prototype.next = function() {
      return this.move();
    };

    /*
     Moves to the previous state
    */


    StatesSection.prototype.prev = function() {
      return this.move(-1);
    };

    /*
    */


    StatesSection.prototype.move = function(position) {
      var newIndex;

      if (position == null) {
        position = 1;
      }
      newIndex = this.get("index") + position;
      if (newIndex < 0) {
        if (this.rotate) {
          newIndex = this.source.length() - 1;
        } else {
          newIndex = 0;
          this.emit("ended");
        }
      } else if (newIndex >= this.source.length()) {
        if (this.rotate) {
          newIndex = 0;
        } else {
          newIndex = this.source.length() - 1;
          this.emit("ended");
        }
      }
      return this.set("index", newIndex);
    };

    /*
    */


    StatesSection.prototype._setIndex = function(index) {
      var newStateView, oldState, self, state, _ref,
        _this = this;

      if (!this.source.length()) {
        return;
      }
      if ((_ref = this.currentState) != null) {
        _ref.set("selected", false);
      }
      oldState = this.currentState;
      self = this;
      state = this.currentState = this.source.at(index || 0);
      newStateView = state.getView();
      this.view.linkChild(newStateView);
      this.view.set("index", index);
      this.currentState.set("selected", true);
      return this._callstack.push((function(next) {
        return newStateView[self.view.get("currentState")].call(newStateView, next);
      }), (function() {
        return oldState != null ? oldState.hide() : void 0;
      }), (function() {
        _this._currentView = newStateView;
        _this.section.append(newStateView.section);
        _this.currentState.show();
        return _this.set("currentView", newStateView);
      }));
    };

    /*
    */


    StatesSection.prototype.emit = function() {
      var _ref;

      StatesSection.__super__.emit.apply(this, arguments);
      arguments[0] = this.name + "." + arguments[0];
      return (_ref = this.view).bubble.apply(_ref, arguments);
    };

    StatesSection.test = function(options) {
      return options.type === "states";
    };

    return StatesSection;

  })(bindable.Object);
  return StatesSection;
});
