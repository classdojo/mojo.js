// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./state", "bindable", "stepc"], function(State, bindable, stepc) {
    return (function(_super) {
      __extends(_Class, _super);

      /*
      */


      function _Class(decorator, options) {
        this.decorator = decorator;
        this.options = options;
        this._displayView = __bind(this._displayView, this);
        this._renderView = __bind(this._renderView, this);
        this._setIndex = __bind(this._setIndex, this);
        this.prev = __bind(this.prev, this);
        this.next = __bind(this.next, this);
        _Class.__super__.constructor.call(this);
        this._id = this.name = this.options.name;
        this.view = decorator.view;
        this.source = new bindable.Collection();
        this.source.enforceId(false);
        this.source.reset((this.options.views || this.options).map(function(stateOptions) {
          return new State(stateOptions);
        }));
        this.set("index", this.options.index || 0);
        this.selector = this.options.selector;
        this.rotate = this.options.rotate || false;
      }

      /*
      */


      _Class.prototype.load = function(callback) {
        this.once("loadedState", callback);
        return this.bind("index", this._setIndex);
      };

      /*
      */


      _Class.prototype.render = function(callback) {
        this.once("renderedState", callback);
        return this.bind("currentView", this._renderView);
      };

      /*
      */


      _Class.prototype.display = function(callback) {
        this.once("displayedState", callback);
        return this.bind("currentView", this._displayView);
      };

      /*
      */


      _Class.prototype.remove = function(callback) {
        if (!this._currentView) {
          return callback();
        }
        return this._currentView.remove(callback);
      };

      /*
      */


      _Class.prototype.next = function() {
        var newIndex;

        newIndex = this.get("index") + 1;
        if (newIndex >= this.source.length()) {
          if (this.rotate) {
            newIndex = 0;
          } else {
            newIndex = this.source.length() - 1;
            this.emit("ended");
          }
        }
        return this.set("index", newIndex);
      };

      /*
      */


      _Class.prototype.prev = function() {
        var newIndex;

        newIndex = this.get("index") - 1;
        if (newIndex < 0) {
          if (this.rotate) {
            newIndex = this.source.length() - 1;
          } else {
            newIndex = 0;
          }
        }
        return this.set("index", newIndex);
      };

      /*
      */


      _Class.prototype._setIndex = function(index) {
        var newState, self, state;

        if (!this.source.length()) {
          return;
        }
        self = this;
        state = this.source.at(index || 0);
        newState = state.createView();
        return stepc.async((function() {
          return newState.loadables.load(this);
        }), (function() {
          if (!self._currentView) {
            return this();
          }
          return self._currentView.remove(this);
        }), (function() {
          self._currentView = newState;
          self.set("currentView", newState);
          return self.emit("loadedState");
        }));
      };

      /*
      */


      _Class.prototype._renderView = function(view) {
        var _this = this;

        view.element(this._element());
        return view.render(function() {
          return _this.emit("renderedState");
        });
      };

      /*
      */


      _Class.prototype.emit = function() {
        var _ref;

        _Class.__super__.emit.apply(this, arguments);
        arguments[0] = this.name + "." + arguments[0];
        return (_ref = this.view).emit.apply(_ref, arguments);
      };

      /*
      */


      _Class.prototype._displayView = function(view) {
        var _this = this;

        return view.display(function() {
          return _this.emit("displayedState");
        });
      };

      /*
      */


      _Class.prototype._element = function() {
        if (this.selector) {
          return this.view.$(this.selector);
        } else {
          return this.view.el;
        }
      };

      return _Class;

    })(bindable.Object);
  });

}).call(this);
