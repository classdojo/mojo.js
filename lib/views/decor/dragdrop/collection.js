// Generated by CoffeeScript 1.6.2
(function() {
  define(["events"], function(events) {
    var Collection;

    Collection = (function() {
      /*
      */
      function Collection() {
        this._droppables = {};
        this._current = {};
      }

      /*
      */


      Collection.prototype.add = function(name, droppable) {
        if (!this._droppables[name]) {
          this._droppables[name] = [];
        }
        return this._droppables[name].push(droppable);
      };

      /*
      */


      Collection.prototype.remove = function(name, droppable) {
        var droppables, i;

        if (!this._droppables[name]) {
          return;
        }
        droppables = this._droppables[name];
        i = droppables.indexOf(droppable);
        if (!~i) {
          return;
        }
        droppables.splice(i, 1);
        if (!droppables.length) {
          return delete this._droppables[name];
        }
      };

      /*
      */


      Collection.prototype.drop = function(name, event) {
        this.drag(name, event);
        if (this._current[name]) {
          this._current[name].emit("dragdrop", event.view);
          return delete this._current[name];
        }
      };

      /*
      */


      Collection.prototype.drag = function(name, event) {
        var del, delh, delw, delx, dely, droppable, droppables, i, mx, my, offset, _i, _len, _results;

        if (!(droppables = this._droppables[name])) {
          return;
        }
        mx = event.mouse.x;
        my = event.mouse.y;
        _results = [];
        for (i = _i = 0, _len = droppables.length; _i < _len; i = ++_i) {
          droppable = droppables[i];
          del = droppable.view.$();
          offset = del.offset();
          if (!offset) {
            continue;
          }
          delx = offset.left;
          dely = offset.top;
          delw = del.width();
          delh = del.height();
          if ((mx > delx) && (mx < delx + delw) && (my > dely) && (my < dely + delh)) {
            if (this._current[name] !== droppable.view) {
              this._current[name] = droppable.view;
              droppable.view.emit("dragenter", event.view);
            }
            break;
          } else if (this._current[name] === droppable.view) {
            this._current[name].emit("dragexit", event.view);
            _results.push(delete this._current[name]);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return Collection;

    })();
    return new Collection();
  });

}).call(this);
