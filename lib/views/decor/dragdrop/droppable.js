// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["../base", "./collection", "jquery"], function(BaseViewDecorator, droppables, $) {
    var DroppableDecorator, _ref;

    DroppableDecorator = (function(_super) {
      __extends(DroppableDecorator, _super);

      function DroppableDecorator() {
        this._onDrop = __bind(this._onDrop, this);
        this._onDragExit = __bind(this._onDragExit, this);
        this._onDragEnter = __bind(this._onDragEnter, this);        _ref = DroppableDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DroppableDecorator.prototype.init = function() {
        DroppableDecorator.__super__.init.call(this);
        this.name = this.view.get("droppable");
        return;
        this.view.on("dragenter", this._onDragEnter);
        this.view.on("dragexit", this._onDragExit);
        return this.view.on("dragdrop", this._onDrop);
      };

      /*
      */


      DroppableDecorator.prototype.display = function(callback) {
        droppables.add(this.name, this);
        return callback();
      };

      DroppableDecorator.prototype.remove = function(callback) {
        droppables.remove(this.name, this);
        return callback();
      };

      DroppableDecorator.prototype._onDragEnter = function(view) {
        return console.log("drag enter", view.get("image_url"));
      };

      DroppableDecorator.prototype._onDragExit = function(view) {
        return console.log("drag exit");
      };

      DroppableDecorator.prototype._onDrop = function(view) {
        return console.log("drag drop");
      };

      return DroppableDecorator;

    })(BaseViewDecorator);
    DroppableDecorator.test = function(view) {
      return view.get("droppable");
    };
    return DroppableDecorator;
  });

}).call(this);
