// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./base", "outcome", "../../utils/async", "../collection"], function(BaseViewDecorator, outcome, async, Collection) {
    var ChildrenDecorator, _ref;

    ChildrenDecorator = (function(_super) {
      __extends(ChildrenDecorator, _super);

      function ChildrenDecorator() {
        _ref = ChildrenDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      ChildrenDecorator.prototype.load = function(callback) {
        var children, childrenClasses, clazz, selector, view;

        childrenClasses = this.view.get("children");
        children = {};
        this._children = new Collection();
        for (selector in childrenClasses) {
          clazz = childrenClasses[selector];
          view = new clazz();
          children[selector] = view;
          view.__selector = selector;
          this._children.push(view);
        }
        this.view.set("children", this.view.children = children);
        return this._children.load(callback);
      };

      /*
      */


      ChildrenDecorator.prototype.render = function(callback) {
        var child, _i, _len, _ref1;

        _ref1 = this._children.source();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          child = _ref1[_i];
          child.element(this.view.$(child.__selector));
        }
        return this._children.render(function() {
          return callback();
        });
      };

      /*
      */


      ChildrenDecorator.prototype.display = function(callback) {
        return this._children.display(callback);
      };

      /*
      */


      ChildrenDecorator.prototype.remove = function(callback) {
        return this._children.remove(callback);
      };

      return ChildrenDecorator;

    })(BaseViewDecorator);
    ChildrenDecorator.test = function(view) {
      return view.has("children") && !view.get("children").__isCollection;
    };
    return ChildrenDecorator;
  });

}).call(this);
