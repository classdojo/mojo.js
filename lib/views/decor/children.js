// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["./base", "outcome", "../../utils/async"], function(BaseViewDecorator, outcome, async) {
    var ChildrenDecorator, _ref;

    ChildrenDecorator = (function(_super) {
      __extends(ChildrenDecorator, _super);

      function ChildrenDecorator() {
        _ref = ChildrenDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      ChildrenDecorator.prototype.load = function(callback) {
        var children, clazz, selector, view;

        children = this.view.get("children");
        this._children = [];
        for (selector in children) {
          clazz = children[selector];
          view = new clazz();
          children[selector] = view;
          this._children.push({
            selector: selector,
            view: view
          });
        }
        return this._callChildFn("load", callback);
      };

      /*
      */


      ChildrenDecorator.prototype.attach = function(callback) {
        return this._callChildFn("attach", callback, function(child) {
          return [child.selector];
        });
      };

      /*
      */


      ChildrenDecorator.prototype.remove = function(callback) {
        return this._callChildFn("remove", callback);
      };

      /*
      */


      ChildrenDecorator.prototype._callChildFn = function(name, callback, getArgs) {
        return async.eachSeries(this._children, (function(child, next) {
          var args;

          args = getArgs ? getArgs(child) : [];
          return child.view[name].apply(child.view, args.concat(next));
        }), callback);
      };

      return ChildrenDecorator;

    })(BaseViewDecorator);
    ChildrenDecorator.test = function(view) {
      return view.has("children") && !view.get("children")._events;
    };
    return ChildrenDecorator;
  });

}).call(this);
