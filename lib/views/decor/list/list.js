// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["bindable", "../../collection", "../../../utils/compose", "hoist", "../../../templates/factory", "dref"], function(bindable, ViewCollection, compose, hoist, templates, dref) {
    /*
     this IS the children
    */
    return (function() {
      /*
      */
      function _Class(decorator, options) {
        var _ref;

        this.decorator = decorator;
        this.options = options;
        this._removeItem = __bind(this._removeItem, this);
        this._hookItemView = __bind(this._hookItemView, this);
        this._id = this.name = options._name;
        this.view = decorator.view;
        this.selector = options.selector;
        this.itemName = options.name || "item";
        this.__source = options.source;
        this._itemViewClass = options.itemViewClass;
        this._viewCollection = this.itemViews = new ViewCollection((_ref = this.options.itemViews) != null ? _ref.call(this.view || []) : void 0);
        this._viewCollection.delay = 0;
        this._viewCollection.bind({
          insert: this._hookItemView,
          remove: this._removeItem
        });
        this.initList();
      }

      /*
      */


      _Class.prototype.load = function(callback) {
        this._loaded = true;
        return this._viewCollection.load(callback);
      };

      _Class.prototype.render = function(callback) {
        this.element = this.selector ? this.view.$(this.selector) : this.view.el;
        this._rendered = true;
        return this._viewCollection.render(callback);
      };

      _Class.prototype.display = function(callback) {
        this._displayed = true;
        return this._viewCollection.display(callback);
      };

      _Class.prototype.remove = function(callback) {
        var _ref;

        if ((_ref = this.binding) != null) {
          _ref.dispose();
        }
        this.binding = void 0;
        return this._viewCollection.remove(callback);
      };

      /*
      */


      _Class.prototype.initList = function() {
        var hoister,
          _this = this;

        hoister = hoist();
        if (this.options.transform) {
          hoister.map(function(item) {
            return _this.options.transform(item, _this);
          });
        }
        hoister.map(function(item) {
          var ops;

          ops = {};
          ops.item = item;
          ops._id = dref.get(item, "_id");
          return ops;
        }).cast(this._itemViewClass);
        if (this.__source) {
          this.binding = this.view.bind(this.__source).collection();
          if (this.options.filter) {
            this.binding.filter(this.options.filter);
          }
          return this.binding.transform(hoister).to(this._viewCollection);
        }
      };

      /*
      */


      _Class.prototype._hookItemView = function(itemView) {
        var self;

        self = this;
        itemView.loadables.unshift({
          _id: "listItem",
          render: function(callback) {
            var _this = this;

            return self._loadChildTemplate(itemView, function(err, content) {
              var el;

              if (err) {
                return callback(err);
              }
              if (self.options.prepend) {
                el = self.element.prepend(content).children().first();
              } else {
                el = self.element.append(content).children().last();
              }
              itemView.element(el);
              return callback();
            });
          },
          remove: function(callback) {
            itemView.el.remove();
            return callback();
          }
        });
        if (this._displayed) {
          itemView.display();
        }
        return itemView;
      };

      /*
      */


      _Class.prototype._removeItem = function(itemView) {
        return itemView != null ? itemView.remove() : void 0;
      };

      /*
      */


      _Class.prototype._loadChildTemplate = function(itemView, callback) {
        var template;

        if (this.options.itemTemplate) {
          template = this.options.itemTemplate;
        } else if (this.options.itemTagName) {
          template = templates.fromSource("<" + this.options.itemTagName + " />");
        }
        if (!template) {
          return callback();
        }
        return template.render(itemView.getFlatten("item") || itemView.getFlatten(), callback);
      };

      return _Class;

    })();
  });

}).call(this);
