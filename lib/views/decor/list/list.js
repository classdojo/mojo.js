// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["bindable", "../../collection", "../../../utils/compose", "hoist", "../../../templates/factory", "dref", "pilot-block", "underscore", "../../adapters/index", "events"], function(bindable, ViewCollection, compose, hoist, templates, dref, pilot, _, adapters, events) {
    /*
     this IS the children
    */
    return (function(_super) {
      __extends(_Class, _super);

      /*
      */


      function _Class(decorator, options) {
        this.decorator = decorator;
        this.options = options;
        this._removeItemView = __bind(this._removeItemView, this);
        this._insertDeferredSections = __bind(this._insertDeferredSections, this);
        this._hookItemView = __bind(this._hookItemView, this);
        this._onSourceChange = __bind(this._onSourceChange, this);
        this._resetItemViews = __bind(this._resetItemViews, this);
        this._id = this.name = options._name;
        this.view = decorator.view;
        this.section = options.section;
        this.itemName = options.name || "item";
        this.__source = options.source;
        this._itemViewClass = adapters.getViewClass(options.itemViewClass);
        this._viewCollection = this.itemViews = new ViewCollection();
        this._listSection = pilot.createSection();
        this._viewCollection.bind({
          insert: this._hookItemView,
          remove: this._removeItemView,
          reset: this._resetItemViews
        });
        this._deferredSections = [];
        this.initList();
      }

      /*
      */


      _Class.prototype.load = function(callback) {
        var _this = this;

        return this._fetchRemote(function() {
          return _this._viewCollection.load(function() {
            _this._loaded = true;
            if (_this.section === "html") {
              _this.view.section.html(_this._listSection.html());
            } else {
              _this.view.set(_this.section, _this._listSection.html());
            }
            return callback();
          });
        });
      };

      /*
      */


      _Class.prototype._resetItemViews = function(items, oldItems) {
        var item, itemView, _i, _j, _len, _len1;

        for (_i = 0, _len = oldItems.length; _i < _len; _i++) {
          itemView = oldItems[_i];
          itemView.dispose();
          itemView.section.dispose();
        }
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          this._hookItemView(item);
        }
        return this.emit("resetList");
      };

      /*
      */


      _Class.prototype._fetchRemote = function(next) {
        var _ref;

        if (this._viewCollection.length) {
          return next();
        }
        if ((_ref = this._sourceCollection) != null) {
          _ref.fetch();
        }
        return this.once("resetList", next);
      };

      /*
      */


      _Class.prototype.render = function(callback) {
        return this._viewCollection.render(callback);
      };

      /*
      */


      _Class.prototype.display = function(callback) {
        return this._viewCollection.display(callback);
      };

      /*
      */


      _Class.prototype.remove = function(callback) {
        var _ref;

        if ((_ref = this._sourceBinding) != null) {
          _ref.dispose();
        }
        this._sourceBinding = void 0;
        return this._viewCollection.remove(callback);
      };

      /*
      */


      _Class.prototype.initList = function() {
        var hoister,
          _this = this;

        hoister = hoist();
        if (this.options.transform) {
          hoister.map(function(item) {
            return _this.options.transform(item, _this);
          });
        }
        this._itemTransformer = hoister.map(function(item) {
          var ops;

          ops = {};
          ops.item = item;
          ops._id = dref.get(item, "_id");
          return ops;
        }).cast(this._itemViewClass);
        return this._bindSource();
      };

      /*
      */


      _Class.prototype._onSourceChange = function(source) {
        var binding, _ref;

        this._viewCollection.source([]);
        this._deferredSections = [];
        this._sourceCollection = adapters.getCollection(source);
        if ((_ref = this._sourceBinding) != null) {
          _ref.dispose();
        }
        this._sourceBinding = binding = this._sourceCollection.bind();
        if (this.options.filter) {
          this._sourceBinding.filter(this.options.filter);
        }
        return binding.to().transform(this._itemTransformer).to(this._viewCollection);
      };

      /*
      */


      _Class.prototype._bindSource = function() {
        if (!this.__source) {
          return;
        }
        if (typeof this.__source === "string") {
          return this._bindSourceString();
        } else {
          return this._bindSourceInst();
        }
      };

      /*
      */


      _Class.prototype._bindSourceString = function() {
        return this.view.bind(this.__source, this._onSourceChange);
      };

      /*
      */


      _Class.prototype._bindSourceInst = function() {
        return this._onSourceChange(this.__source);
      };

      /*
      */


      _Class.prototype._hookItemView = function(itemView) {
        var self;

        self = this;
        this.view.linkChild(itemView);
        itemView.decorators.push({
          load: function(callback) {
            if (self._loaded) {
              self._deferInsert(itemView.section);
            } else {
              self._listSection.append(itemView.section);
            }
            return callback();
          }
        });
        return itemView;
      };

      /*
      */


      _Class.prototype._deferInsert = function(section) {
        this._deferredSections.push(section);
        return this._deferInsert2();
      };

      /*
      */


      _Class.prototype._deferInsert2 = function() {
        clearTimeout(this._deferInsertTimeout);
        return this._deferInsertTimeout = setTimeout(this._insertDeferredSections, 0);
      };

      /*
      */


      _Class.prototype._insertDeferredSections = function() {
        var _ref;

        (_ref = this._listSection).append.apply(_ref, this._deferredSections);
        return this._deferredSections = [];
      };

      /*
      */


      _Class.prototype._removeItemView = function(itemView) {
        if (!itemView) {
          return;
        }
        return itemView.remove();
      };

      return _Class;

    })(events.EventEmitter);
  });

}).call(this);
