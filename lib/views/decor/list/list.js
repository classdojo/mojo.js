// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["bindable", "../../collection", "../../../utils/compose", "hoist", "../../../templates/factory", "dref", "pilot-block", "underscore"], function(bindable, ViewCollection, compose, hoist, templates, dref, pilot, _) {
    /*
     this IS the children
    */
    return (function() {
      /*
      */
      function _Class(decorator, options) {
        this.decorator = decorator;
        this.options = options;
        this._removeItem = __bind(this._removeItem, this);
        this._insertDeferredSections = __bind(this._insertDeferredSections, this);
        this._hookItemView = __bind(this._hookItemView, this);
        this._id = this.name = options._name;
        this.view = decorator.view;
        this.section = options.section;
        this.itemName = options.name || "item";
        this.__source = options.source;
        this._itemViewClass = options.itemViewClass;
        this._viewCollection = this.itemViews = new ViewCollection();
        this._viewCollection.bind({
          insert: this._hookItemView,
          remove: this._removeItem
        });
        this._listSection = pilot.createSection();
        this._deferredSections = [];
        this._insertDeferredSections = _.debounce(this._insertDeferredSections, 0);
        this.initList();
      }

      /*
      */


      _Class.prototype.load = function(callback) {
        var _this = this;

        return this._viewCollection.load(function() {
          _this._loaded = true;
          _this.view.set(_this.section, _this._listSection.html());
          return callback();
        });
      };

      /*
      */


      _Class.prototype.render = function(callback) {
        return this._viewCollection.render(callback);
      };

      /*
      */


      _Class.prototype.display = function(callback) {
        return this._viewCollection.display(callback);
      };

      /*
      */


      _Class.prototype.remove = function(callback) {
        var _ref;

        if ((_ref = this.binding) != null) {
          _ref.dispose();
        }
        this.binding = void 0;
        return this._viewCollection.remove(callback);
      };

      /*
      */


      _Class.prototype.initList = function() {
        var hoister,
          _this = this;

        hoister = hoist();
        if (this.options.transform) {
          hoister.map(function(item) {
            return _this.options.transform(item, _this);
          });
        }
        hoister.map(function(item) {
          var ops;

          ops = {};
          ops.item = item;
          ops._id = dref.get(item, "_id");
          return ops;
        }).cast(this._itemViewClass);
        if (this.__source) {
          this.binding = this.view.bind(this.__source).collection();
          if (this.options.filter) {
            this.binding.filter(this.options.filter);
          }
          return this.binding.transform(hoister).to(this._viewCollection);
        }
      };

      /*
      */


      _Class.prototype._hookItemView = function(itemView) {
        var self;

        self = this;
        this.view.linkChild(itemView);
        itemView.decorators.push({
          _id: "listItem2",
          load: function(callback) {
            if (self._loaded && false) {
              self._deferInsert(itemView.section);
            } else {
              self._listSection.append(itemView.section);
            }
            return callback();
          }
        });
        return itemView;
      };

      /*
      */


      _Class.prototype._deferInsert = function(section) {
        this._deferredSections.push(section);
        return this._insertDeferredSections();
      };

      /*
      */


      _Class.prototype._insertDeferredSections = function() {
        var _ref;

        (_ref = this._listSection).append.apply(_ref, this._deferredSections);
        return this._deferredSections = [];
      };

      /*
      */


      _Class.prototype._removeItem = function(itemView) {
        return itemView != null ? itemView.remove() : void 0;
      };

      return _Class;

    })();
  });

}).call(this);
