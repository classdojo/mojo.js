// Generated by CoffeeScript 1.6.2
/*
  list:
    "selector": 
      childView: ChildView
      source: "someSource"
      transform: () ->
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["../selectable", "./list", "../../collection", "../../../utils/async", "../../../utils/idGenerator"], function(SelectableDecorator, List, ViewCollection, async, generateId) {
    var ListDecorator, _ref;

    ListDecorator = (function(_super) {
      __extends(ListDecorator, _super);

      function ListDecorator() {
        _ref = ListDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ListDecorator.prototype.name = "list";

      ListDecorator.prototype.controllerClass = List;

      /*
      */


      ListDecorator.prototype._setupLists = function(lists) {
        var key, keyParts, list, property, selector, _lists;

        if (this._isSingle(lists)) {
          return [new List(generateId(), this.view, lists.selector || this.view.el, lists)];
        }
        _lists = [];
        for (key in lists) {
          keyParts = key.split(" ");
          selector = keyParts.pop();
          property = keyParts.pop();
          list = new List(property || selector, this.view, selector, lists[key]);
          if (property) {
            this.view[property] = list;
          }
          _lists.push(list);
        }
        return _lists;
      };

      return ListDecorator;

    })(SelectableDecorator);
    ListDecorator.test = function(view) {
      return !!view.list;
    };
    return ListDecorator;
  });

}).call(this);
