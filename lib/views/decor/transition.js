// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["comerr", "./base", "underscore", "jquery-transit", "jquery", "../../utils/async"], function(comerr, BaseViewDecorator, _, transit, $, async) {
    var TransitionDecorator, _ref;

    TransitionDecorator = (function(_super) {
      __extends(TransitionDecorator, _super);

      function TransitionDecorator() {
        _ref = TransitionDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      /*
      */


      TransitionDecorator.prototype.init = function() {
        TransitionDecorator.__super__.init.call(this);
        return this.transition = this.options;
      };

      /*
      */


      TransitionDecorator.prototype.render = function() {
        return this.view.$().css({
          display: "none"
        });
      };

      /*
      */


      TransitionDecorator.prototype.display = function(callback) {
        this.view.$().css({
          display: "block"
        });
        return this._transitionAll("enter", callback);
      };

      /*
      */


      TransitionDecorator.prototype.remove = function(callback) {
        return this._transitionAll("exit", callback);
      };

      /*
      */


      TransitionDecorator.prototype._transitionAll = function(type, callback) {
        var _this = this;

        return async.forEach(this._filterTransitions(type), (function(transition, next) {
          return _this._transition(_this._element(transition), transition[type], next);
        }), callback);
      };

      /*
      */


      TransitionDecorator.prototype._transition = function(element, transition, callback) {
        if (!element.length) {
          return callback(new comerr.NotFound("element does not exist"));
        }
        if (transition.from) {
          element.css(transition.from);
        }
        return element.transit(transition.to || transition, callback);
      };

      /*
      */


      TransitionDecorator.prototype._transitions = function() {
        var selector, trans, transition, transitions;

        transition = this.transition;
        if (transition.enter || transition.exit) {
          return [transition];
        }
        transitions = [];
        for (selector in transition) {
          trans = transition[selector];
          trans.selector = selector;
          transitions.push(trans);
        }
        return transitions;
      };

      /*
      */


      TransitionDecorator.prototype._filterTransitions = function(type) {
        return this._transitions().filter(function(trans) {
          return !!trans[type];
        });
      };

      /*
      */


      TransitionDecorator.prototype._element = function(transition) {
        var selector;

        selector = transition.selector || transition.el;
        if (selector) {
          return this.view.$(selector);
        } else {
          return this.view.$();
        }
      };

      return TransitionDecorator;

    })(BaseViewDecorator);
    TransitionDecorator.getOptions = function(view) {
      return view.transition;
    };
    return TransitionDecorator;
  });

}).call(this);
