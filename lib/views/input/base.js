// Generated by CoffeeScript 1.6.3
var BaseInputView, BaseView, templates, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseView = require("../base");

templates = require("../../templates/factory");

BaseInputView = (function(_super) {
  __extends(BaseInputView, _super);

  function BaseInputView() {
    this._onValueChanged = __bind(this._onValueChanged, this);
    _ref = BaseInputView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  BaseInputView.prototype._onRendered = function() {
    BaseInputView.__super__._onRendered.call(this);
    return this.bind("value", this._onValueChanged);
  };

  /*
  */


  BaseInputView.prototype.changed = function() {
    return this.emit("data", {
      name: this.get("name"),
      value: this.get("value")
    });
  };

  /*
   Reflect the value change in the text input
  */


  BaseInputView.prototype._onValueChanged = function(value) {
    return this.changed();
  };

  return BaseInputView;

})(BaseView);

module.exports = BaseInputView;
