// Generated by CoffeeScript 1.6.2
(function() {
  var BaseView, FormView, templates, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseView = require("../base");

  templates = require("../../templates/factory");

  /*
  */


  FormView = (function(_super) {
    __extends(FormView, _super);

    function FormView() {
      this._model = __bind(this._model, this);
      this._onLoaded = __bind(this._onLoaded, this);
      this._showErrorMessage = __bind(this._showErrorMessage, this);
      this._validate = __bind(this._validate, this);
      this._onRendered = __bind(this._onRendered, this);
      this.submit = __bind(this.submit, this);      _ref = FormView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    FormView.prototype.modelClass = null;

    /*
    */


    FormView.prototype.template = templates.fromSource("<form></form>");

    /*
    */


    FormView.prototype.submit = function(callback) {
      var model,
        _this = this;

      if (callback == null) {
        callback = (function() {});
      }
      model = this._model();
      return model.save(function(err, result) {
        if (err) {
          return _this._showErrorMessage(err);
        }
        return _this.bubble("complete");
      });
    };

    /*
    */


    FormView.prototype._onRendered = function() {
      var inputSection, inputView, _i, _len, _ref1, _results;

      FormView.__super__._onRendered.call(this);
      this._validate();
      _ref1 = this.get("sections").source.source();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        inputSection = _ref1[_i];
        inputView = inputSection.view;
        _results.push(this.bind("model." + (inputView.get("name"))).to(inputView, "value").to(this._validate).bothWays().now());
      }
      return _results;
    };

    /*
    */


    FormView.prototype._validate = function() {
      var _this = this;

      return this._model().validate(function(err) {
        return _this._toggleValidity(!err);
      });
    };

    /*
     useful for enabling / disabling a button
    */


    FormView.prototype._toggleValidity = function(valid) {
      return this.set("valid", valid);
    };

    /*
    */


    FormView.prototype._showErrorMessage = function() {};

    /*
    */


    FormView.prototype._onLoaded = function() {
      return FormView.__super__._onLoaded.call(this);
    };

    /*
    */


    FormView.prototype._model = function() {
      var clazz, model;

      model = this.get("model");
      if (this.get("model")) {
        return model;
      }
      clazz = this.get("modelClass");
      model = new clazz;
      this.set("model", model);
      return model;
    };

    return FormView;

  })(BaseView);

  module.exports = FormView;

}).call(this);
