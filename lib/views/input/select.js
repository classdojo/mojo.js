// Generated by CoffeeScript 1.6.3
var InputView, SelectInputOptionView, SelectInputView, View, bindable, dref, selectInputTemplate, selectTemplate, templates, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

InputView = require("./base");

View = require("../base");

templates = require("../../templates/factory");

dref = require("dref");

bindable = require("bindable");

selectInputTemplate = require("./selectInput.pc");

selectTemplate = require("./select.pc");

SelectInputOptionView = (function(_super) {
  __extends(SelectInputOptionView, _super);

  function SelectInputOptionView() {
    _ref = SelectInputOptionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SelectInputOptionView.prototype.paper = selectInputTemplate;

  return SelectInputOptionView;

})(View);

SelectInputView = (function(_super) {
  __extends(SelectInputView, _super);

  function SelectInputView() {
    this._onValueChanged = __bind(this._onValueChanged, this);
    this.select = __bind(this.select, this);
    _ref1 = SelectInputView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  /*
  */


  SelectInputView.prototype.paper = selectTemplate;

  /*
  */


  SelectInputView.prototype.sections = {
    selectList: {
      type: "list",
      modelViewClass: SelectInputOptionView,
      source: "source",
      transform: function(model, list) {
        var view;
        view = list.view;
        return {
          _id: dref.get(model, "_id"),
          value: view._modelValue(model),
          label: dref.get(model, view.get("modelLabel")),
          data: model
        };
      }
    }
  };

  /*
  */


  SelectInputView.prototype.selectLabel = "Select";

  /*
  */


  SelectInputView.prototype.modelLabel = "label";

  /*
  */


  SelectInputView.prototype.modelValue = "_id";

  /*
  */


  SelectInputView.prototype._changeSelect = function(event) {
    var selected, selectedVal;
    selected = this.$(":selected");
    selectedVal = selected.val();
    if (selectedVal === "nil") {
      return this.deselect();
    }
    return this.select(selected.index() - this._inc());
  };

  /*
   Selects an model based on the index
  */


  SelectInputView.prototype.select = function(index) {
    var model;
    if (!~index) {
      return this.deselect();
    }
    model = this.get("source").at(index);
    this.set("selectedModel", model);
    return this.set("value", this._modelValue(model));
  };

  /*
   deselects the model
  */


  SelectInputView.prototype.deselect = function() {
    return this.set("value", void 0);
  };

  /*
  */


  SelectInputView.prototype._inc = function() {
    if (this.get("selectLabel")) {
      return 1;
    } else {
      return 0;
    }
  };

  /*
  */


  SelectInputView.prototype._modelValue = function(model) {
    var _ref2;
    return (_ref2 = dref.get(model, this.get("modelValue"))) != null ? _ref2 : dref.get(model, this.get("modelLabel"));
  };

  /*
  */


  SelectInputView.prototype._onValueChanged = function(value) {
    var i, index, model, _i, _len, _ref2;
    SelectInputView.__super__._onValueChanged.call(this, value);
    index = -1;
    _ref2 = this.get("source").source();
    for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
      model = _ref2[i];
      if (this._modelValue(model) === value) {
        index = i;
        break;
      }
    }
    if (!~index) {
      this.set("nothingSelected", Math.random());
      return;
    }
    this.set("selectedModel", model);
    return $($(this.section.elements).find("option")[index + this._inc()]).attr("selected", "selected");
  };

  return SelectInputView;

})(InputView);

module.exports = SelectInputView;
