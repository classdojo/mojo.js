// Generated by CoffeeScript 1.6.3
var BaseView, TextInputView, templates, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseView = require("./base");

templates = require("../../templates/factory");

TextInputView = (function(_super) {
  __extends(TextInputView, _super);

  function TextInputView() {
    this._onValueChanged = __bind(this._onValueChanged, this);
    _ref = TextInputView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  TextInputView.prototype.template = templates.fromSource("<input type='text' name='{{view.name}}'>", {
    engine: "handlebars"
  });

  /*
  */


  TextInputView.prototype.events = {
    "keyup": "_onInputChange"
  };

  /*
   on input change, set the value of this text input to the element value
  */


  TextInputView.prototype._onInputChange = function() {
    return this.set("value", this.$().val());
  };

  /*
   Reflect the value change in the text input
  */


  TextInputView.prototype._onValueChanged = function(value) {
    TextInputView.__super__._onValueChanged.call(this, value);
    return this.$().val(value);
  };

  return TextInputView;

})(BaseView);

module.exports = TextInputView;
