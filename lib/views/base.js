// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "events", "bindable", "./collection", "../utils/idGenerator", "outcome", "dref", "underscore", "./decor/facade", "asyngleton", "../models/locator", "../utils/compose", "../utils/async"], function($, events, bindable, ViewCollection, generateId, outcome, dref, _, ViewDecorator, asyngleton, modelLocator, compose, async) {
    var BaseView;

    return BaseView = (function(_super) {
      __extends(BaseView, _super);

      /*
       may seem a bit antipattern-ish to use a singleton object like this for all views, bit 
       it makes data-binding to one object a helluvalot easier, and it also promotes good use by making it
       easier for developer to reuse global data. 
      
       This also reduces the amount of written code tremendously.
      */


      function BaseView(options) {
        if (options == null) {
          options = {};
        }
        this._onRemoved = __bind(this._onRemoved, this);
        this._onRemove = __bind(this._onRemove, this);
        this._onDisplayed = __bind(this._onDisplayed, this);
        this._onDisplay = __bind(this._onDisplay, this);
        this._onRendered = __bind(this._onRendered, this);
        this._onRender = __bind(this._onRender, this);
        this._onLoaded = __bind(this._onLoaded, this);
        this._onLoad = __bind(this._onLoad, this);
        this._id = dref.get(options, "_id") || generateId();
        options.view = this;
        options.modelLocator = modelLocator;
        BaseView.__super__.constructor.call(this, options);
        this.decorator = new ViewDecorator(this);
        this.loadables = new ViewCollection([this.decorator]);
        compose(this, this.loadables, ["load", "render", "display", "remove"]);
        this._init();
        this.decorator.init();
      }

      /*
      */


      BaseView.prototype.init = function() {};

      /*
      */


      BaseView.prototype._init = function() {
        this.init();
        return this._listen();
      };

      /*
      */


      BaseView.prototype._listen = function() {
        return this.loadables.on({
          load: this._onLoad,
          loaded: this._onLoaded,
          render: this._onRender,
          rendered: this._onRendered,
          display: this._onDisplay,
          displayed: this._onDisplayed,
          remove: this._onRemove,
          removed: this._onRemoved
        });
      };

      /*
       returns a search for a particular element
      */


      BaseView.prototype.$ = function(search) {
        var _ref;

        return (_ref = this.el) != null ? _ref.find(search) : void 0;
      };

      /*
       attaches to an element
      */


      BaseView.prototype.attach = function(selectorOrElement, callback) {
        this.element(selectorOrElement);
        return this.loadables.display(callback);
      };

      /*
      */


      BaseView.prototype.element = function(selectorOrElement) {
        if (!arguments.length) {
          return this.el;
        }
        this.el = typeof selectorOrElement === "string" ? $(selectorOrElement) : selectorOrElement;
        this.selector = selectorOrElement;
        return this;
      };

      /*
      */


      BaseView.prototype.emit = function() {
        var _ref;

        BaseView.__super__.emit.apply(this, arguments);
        arguments[0] = arguments[0].toLowerCase();
        return (_ref = this.el) != null ? _ref.trigger.apply(this.el, arguments) : void 0;
      };

      /*
      */


      BaseView.prototype._onLoad = function() {};

      BaseView.prototype._onLoaded = function() {};

      BaseView.prototype._onRender = function() {};

      BaseView.prototype._onRendered = function() {};

      BaseView.prototype._onDisplay = function() {};

      BaseView.prototype._onDisplayed = function() {};

      BaseView.prototype._onRemove = function() {};

      BaseView.prototype._onRemoved = function() {
        if (!this.el) {
          return;
        }
        this.el.unbind("*");
        this.el.html("");
        this.dispose();
        return this.el = void 0;
      };

      return BaseView;

    })(bindable.Object);
  });

}).call(this);
