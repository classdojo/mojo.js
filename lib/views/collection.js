// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["bindable", "../utils/async", "cstep", "asyngleton", "../utils/throttleCallback"], function(bindable, async, cstep, asyngleton, throttleCallback) {
    var callbackThrottle;

    callbackThrottle = throttleCallback(20);
    return (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        this._displayLateItems = __bind(this._displayLateItems, this);
        this._loadLateItem = __bind(this._loadLateItem, this);        _Class.__super__.constructor.apply(this, arguments);
        this.enforceId(false);
        this.on("insert", this._loadLateItem);
      }

      /*
      */


      _Class.prototype.limit = 1;

      /*
       Creates, and parses the DOM
      */


      _Class.prototype.load = asyngleton(function(callback) {
        return this._call("load", "loaded", this.source(), callback);
      });

      /*
       attaches any controllers / bindings to the view (rivets)
      */


      _Class.prototype.render = asyngleton(function(callback) {
        var _this = this;

        return this.load(function() {
          return _this._call("render", "rendered", _this.source(), callback);
        });
      });

      /*
       adds the elements to the DOM - transitions happen here
      */


      _Class.prototype.display = asyngleton(function(callback) {
        var _this = this;

        return this.render(function() {
          return _this._call("display", "displayed", _this.source(), callback);
        });
      });

      /*
       removes & unloads the view
      */


      _Class.prototype.remove = asyngleton(function(callback) {
        var _this = this;

        return this.display(function() {
          return _this._call("remove", "removed", _this.source(), callback);
        });
      });

      /*
      */


      _Class.prototype.emit = function() {
        var _ref;

        _Class.__super__.emit.apply(this, arguments);
        return (_ref = this.view) != null ? _ref.emit.apply(_ref, arguments) : void 0;
      };

      /*
      */


      _Class.prototype._call = function(method, event, source, callback) {
        var done, run, src,
          _this = this;

        if (callback == null) {
          callback = (function() {});
        }
        if (this._currentState !== method) {
          this.emit(this._currentState = method);
        }
        run = function(item, next) {
          var fn;

          fn = item[method];
          if (!fn) {
            return next();
          }
          return callbackThrottle.call(item, fn, next);
        };
        done = function(err, result) {
          return _this._callPending(method, event, callback);
        };
        src = source.concat();
        if (!~this.limit) {
          return async.forEach(src, run, done);
        } else {
          return async.eachLimit(src, this.limit, run, done);
        }
      };

      /*
       Calls any pending
      */


      _Class.prototype._callPending = function(method, event, callback) {
        var pending;

        if (!this._pending) {
          this.emit(this._currentState = event);
          callback();
          return;
        }
        pending = this._pending;
        this._pending = void 0;
        return this._call(method, event, pending, callback);
      };

      /*
      */


      _Class.prototype._loadLateItem = function(item) {
        if (!this._currentState) {
          return;
        }
        if (this._currentState === "displayed") {
          item.display();
          return;
        }
        if (!this._pending) {
          this._pending = [];
        }
        return this._pending.push(item);
      };

      /*
      */


      _Class.prototype._displayLateItems = function(items) {
        return this._callViewMethod("display", "displayed");
      };

      return _Class;

    })(bindable.Collection);
  });

}).call(this);
