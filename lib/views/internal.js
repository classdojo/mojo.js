// Generated by CoffeeScript 1.6.3
var BindableInheritableObject, InternalView, ViewCollection, ViewStates, dref, generateId, modelLocator, pilot, type, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BindableInheritableObject = require("../bindable/inheritable");

_ = require("underscore");

ViewCollection = require("./collection");

generateId = require("../utils/idGenerator");

dref = require("dref");

modelLocator = require("../models/locator");

pilot = require("pilot-block");

ViewStates = require("./states");

type = require("type-component");

InternalView = (function(_super) {
  __extends(InternalView, _super);

  /*
  */


  InternalView.prototype.__isView = true;

  /*
  */


  InternalView.prototype.modelLocator = modelLocator;

  /*
  */


  function InternalView(data) {
    if (data == null) {
      data = {};
    }
    this._onRemoved = __bind(this._onRemoved, this);
    this._onRemove = __bind(this._onRemove, this);
    this._onDisplayed = __bind(this._onDisplayed, this);
    this._onDisplay = __bind(this._onDisplay, this);
    this._onRendered = __bind(this._onRendered, this);
    this._onRender = __bind(this._onRender, this);
    this._onLoaded = __bind(this._onLoaded, this);
    this._onLoad = __bind(this._onLoad, this);
    this.dispose = __bind(this.dispose, this);
    this._init = __bind(this._init, this);
    this._id = dref.get(data.model || {}, "_id") || generateId();
    data.currentState = ViewStates.NONE;
    InternalView.__super__.constructor.call(this, data);
    this.init();
  }

  /*
  */


  InternalView.prototype.init = function() {
    this.decorators = this.loadables = new ViewCollection();
    this.decorators.view = this;
    this.section = pilot.createSection();
    return this._initListeners();
  };

  /*
   returns path to this view
  */


  InternalView.prototype.path = function() {
    var cp, path;
    path = [];
    cp = this;
    while (cp) {
      path.unshift(cp.constructor.name);
      cp = cp._parent;
    }
    return path.join(".");
  };

  /*
  */


  InternalView.prototype.load = function(next) {
    return this.decorators.load(next);
  };

  InternalView.prototype.render = function(next) {
    return this.decorators.render(next);
  };

  InternalView.prototype.display = function(next) {
    return this.decorators.display(next);
  };

  InternalView.prototype.remove = function(next) {
    return this.decorators.remove(next);
  };

  /*
   returns a search for a particular element
   TODO - this shouldn't really exist - leave it up
   to any decorator to implement this, or place it in 
   a utility function
  */


  InternalView.prototype.$ = function(search) {
    var el;
    el = $(this.section.elements.filter(function(node) {
      return noe.nodeType === 1;
    }));
    if (arguments.length) {
      return el.find(search);
    }
    return el;
  };

  /*
   attaches to an element to the DOM
  */


  InternalView.prototype.attach = function(element, callback) {
    var _this = this;
    this._domElement = element[0] || element;
    this.decorators.once("display", function() {
      return _this.section.replaceChildren(_this._domElement);
    });
    return this.display(callback);
  };

  /*
  */


  InternalView.prototype._init = function(event) {
    if (this._initialized) {
      return;
    }
    this._initialized = true;
    this._initDecor();
    return this._initBindings();
  };

  /*
  */


  InternalView.prototype.dispose = function() {
    var el;
    el = this.$();
    el.unbind("*");
    this.section.dispose();
    return InternalView.__super__.dispose.call(this);
  };

  /*
  */


  InternalView.prototype._initListeners = function() {
    this.decorators.on({
      load: this._onLoad,
      loaded: this._onLoaded,
      render: this._onRender,
      rendered: this._onRendered,
      display: this._onDisplay,
      displayed: this._onDisplayed,
      remove: this._onRemove,
      removed: this._onRemoved
    });
    return this.decorators.once("stateChange", this._init);
  };

  /*
  */


  InternalView.prototype._initDecor = function() {};

  /*
  */


  InternalView.prototype._initBindings = function() {
    return this.decorators.bind("currentState").to(this, "currentState").now();
  };

  /*
  */


  InternalView.prototype._onLoad = function() {};

  InternalView.prototype._onLoaded = function() {
    var _ref;
    if (((_ref = this._parent) != null ? _ref.get("currentState") : void 0) === ViewStates.LOADING) {
      return;
    }
    return this.section.updateChildren();
  };

  /*
  */


  InternalView.prototype._onRender = function() {};

  InternalView.prototype._onRendered = function() {};

  /*
  */


  InternalView.prototype._onDisplay = function() {};

  InternalView.prototype._onDisplayed = function() {};

  /*
  */


  InternalView.prototype._onRemove = function() {};

  InternalView.prototype._onRemoved = function() {
    var _ref;
    if (((_ref = this._parent) != null ? _ref.get("currentState") : void 0) === ViewStates.REMOVING) {
      return;
    }
    return this.dispose();
  };

  return InternalView;

})(BindableInheritableObject);

module.exports = InternalView;
