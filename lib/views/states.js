// Generated by CoffeeScript 1.6.3
var State, StatesView, ViewCollection, bindable, flatstack, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bindable = require("bindable");

ViewCollection = require("./base/collection");

State = require("./state");

flatstack = require("flatstack");

StatesView = (function(_super) {
  __extends(StatesView, _super);

  function StatesView() {
    this._setIndex = __bind(this._setIndex, this);
    this._setName = __bind(this._setName, this);
    this.prev = __bind(this.prev, this);
    this.next = __bind(this.next, this);
    this._remove = __bind(this._remove, this);
    this._display = __bind(this._display, this);
    this._render = __bind(this._render, this);
    this._load = __bind(this._load, this);
    _ref = StatesView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  StatesView.prototype._init = function() {
    var _ref1,
      _this = this;
    StatesView.__super__._init.call(this);
    this.decorators.push({
      load: this._load,
      render: this._render,
      display: this._display,
      remove: this._remove
    });
    this._views = new ViewCollection();
    this.source = new bindable.Collection();
    this.source.enforceId(false);
    this.source.reset(this.get("views").map(function(stateOptions, i) {
      return new State(_this, stateOptions, i);
    }));
    this.set("source", this.source);
    this.selector = this.get("selector");
    this.rotate = (_ref1 = this.get("rotate")) != null ? _ref1 : false;
    this._callstack = flatstack(this);
    return this.bind("currentName").to(this._setName).now();
  };

  /*
  */


  StatesView.prototype._load = function(next) {
    this.bind("index", this._setIndex).once().now();
    return this._views.load(next);
  };

  /*
  */


  StatesView.prototype._render = function(next) {
    return this._views.render(next);
  };

  /*
  */


  StatesView.prototype._display = function(next) {
    this.bind("index", this._setIndex).now();
    return this._views.display(next);
  };

  /*
  */


  StatesView.prototype._remove = function(next) {
    return this._views.remove(next);
  };

  /*
   selects a state
  */


  StatesView.prototype.select = function(stateOrIndex) {
    var i;
    if (typeof stateOrIndex === "number") {
      return this.set("index", stateOrIndex);
    } else {
      i = this.source.indexOf(stateOrIndex);
      if (~i) {
        return this.select(i);
      }
    }
  };

  /*
   Moves onto the next state
  */


  StatesView.prototype.next = function() {
    return this.move();
  };

  /*
   Moves to the previous state
  */


  StatesView.prototype.prev = function() {
    return this.move(-1);
  };

  /*
  */


  StatesView.prototype.move = function(position) {
    var newIndex;
    if (position == null) {
      position = 1;
    }
    newIndex = this.get("index") + position;
    if (newIndex < 0) {
      if (this.rotate) {
        newIndex = this.source.length() - 1;
      } else {
        newIndex = 0;
        this.emit("ended");
      }
    } else if (newIndex >= this.source.length()) {
      if (this.rotate) {
        newIndex = 0;
      } else {
        newIndex = this.source.length() - 1;
        this.emit("ended");
      }
    }
    return this.set("index", newIndex);
  };

  /*
  */


  StatesView.prototype._setName = function(name) {
    var i, state, _i, _len, _ref1, _results;
    _ref1 = this.source.source();
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      state = _ref1[i];
      if (state.get("name") === name) {
        this.set("index", i);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  /*
  */


  StatesView.prototype._setIndex = function(index) {
    var isNew, newStateView, oldState, self, state, _ref1, _ref2,
      _this = this;
    if (!this.source.length()) {
      return;
    }
    if ((_ref1 = this.currentState) != null) {
      _ref1.set("selected", false);
    }
    oldState = this.currentState;
    self = this;
    state = this.currentState = this.source.at(index || 0);
    isNew = !state.hasView();
    newStateView = state.getView();
    this.linkChild(newStateView);
    this.currentState.set("selected", true);
    if ((_ref2 = this._displayListener) != null) {
      _ref2.dispose();
    }
    if (oldState && oldState !== this.currentState) {
      if (newStateView.get("currentState") !== "display") {
        this._displayListener = newStateView.once("render display", function() {
          return oldState.hide();
        });
      } else {
        oldState.hide();
      }
    }
    if (isNew) {
      this._views.push(newStateView);
      this.section.append(newStateView.section);
    }
    this.currentState.show();
    return this.set("currentView", newStateView);
  };

  return StatesView;

})(require("./base/decorable"));

module.exports = StatesView;
