// Generated by CoffeeScript 1.6.3
var DecorFactory, DecorableView, Inheritable, bindable, dref, flatstack, generateId, loaf, models, type, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require("underscore");

generateId = require("../../utils/idGenerator");

dref = require("dref");

type = require("type-component");

DecorFactory = require("./decor/factory");

loaf = require("loaf");

flatstack = require("flatstack");

models = require("../../models");

bindable = require("bindable");

Inheritable = require("../../bindable/inheritable");

DecorableView = (function(_super) {
  __extends(DecorableView, _super);

  /*
  */


  DecorableView.prototype.__isView = true;

  /*
  */


  DecorableView.prototype.define = ["sections"];

  /*
  */


  DecorableView.prototype.models = models;

  /*
  */


  function DecorableView(data) {
    var _ref, _ref1, _ref2, _ref3, _ref4;
    if (data == null) {
      data = {};
    }
    this._onRemoved = __bind(this._onRemoved, this);
    this._onRemove = __bind(this._onRemove, this);
    this._onRendered = __bind(this._onRendered, this);
    this._onRender = __bind(this._onRender, this);
    this.dispose = __bind(this.dispose, this);
    this._init = __bind(this._init, this);
    this.remove = __bind(this.remove, this);
    this.render = __bind(this.render, this);
    if (type(data) !== "object") {
      throw new Error("data passed in view must be an object");
    }
    DecorableView.__super__.constructor.call(this);
    this.set(data);
    this["this"] = this;
    this._id = (_ref = (_ref1 = (_ref2 = data._id) != null ? _ref2 : (_ref3 = data.model) != null ? typeof _ref3.get === "function" ? _ref3.get("_id") : void 0 : void 0) != null ? _ref1 : (_ref4 = data.model) != null ? _ref4._id : void 0) != null ? _ref : generateId();
    this._states = {};
    this.section = loaf();
    this.callstack = flatstack();
    this.init();
  }

  /*
  */


  DecorableView.prototype.init = function() {};

  /*
   returns path to this view. Useful for debugging.
  */


  DecorableView.prototype.path = function() {
    var cp, path;
    path = [];
    cp = this;
    while (cp) {
      path.unshift(cp.constructor.name);
      cp = cp._parent;
    }
    return path.join(".");
  };

  /*
  */


  DecorableView.prototype.render = function(next) {
    this._init();
    return this._call("render", "rendered", next);
  };

  /*
  */


  DecorableView.prototype.remove = function(next) {
    return this._call("remove", "removed", next);
  };

  /*
   memoize call fn
  */


  DecorableView.prototype._call = function(startEvent, endEvent, next) {
    var _this = this;
    if (type(next) !== "function") {
      next = function() {};
    }
    if (this._states[endEvent]) {
      return next();
    }
    this.once(endEvent, next);
    if (this._states[startEvent]) {
      return;
    }
    this._states[startEvent] = true;
    this.emit(startEvent);
    this._onRemove();
    return this.callstack.push(function() {
      _this._states[endEvent] = true;
      return _this.emit(endEvent);
    });
  };

  /*
   returns a search for a particular element
   TODO - this shouldn't really exist - leave it up
   to any decorator to implement this, or place it in 
   a utility function
  */


  DecorableView.prototype.$ = function(search) {
    var el;
    el = $(this.section.getChildNodes());
    if (arguments.length) {
      return el.find(search);
    }
    return el;
  };

  /*
   attaches to an element to the DOM
  */


  DecorableView.prototype.attach = function(element, next) {
    var _this = this;
    return this.render(function() {
      (element[0] || element).appendChild(_this.section.toFragment());
      return typeof next === "function" ? next() : void 0;
    });
  };

  /*
   dynamically added decorators
  */


  DecorableView.prototype.decorate = function(options) {
    this.__decorators = void 0;
    return DecorFactory.setup(this, options);
  };

  /*
  */


  DecorableView.prototype._init = function(event) {
    if (this._initialized) {
      return;
    }
    this._initialized = true;
    this.emit("initialize");
    this.on("render", this._onRender);
    this.on("rendered", this._onRendered);
    this.on("remove", this._onRemove);
    this.on("removed", this._onRemoved);
    return DecorFactory.setup(this);
  };

  /*
  */


  DecorableView.prototype.dispose = function() {
    var childName;
    DecorableView.__super__.dispose.call(this);
    if (this.sections) {
      for (childName in this.sections) {
        this.sections[childName].dispose();
      }
    }
    if (this.parent && this.parent._states.remove && !this.parent._states.removed) {
      return;
    }
    return this.section.dispose();
  };

  /*
  */


  DecorableView.prototype.setChild = function(name, child) {
    child.name = name;
    child.set("_parent", this);
    child.set("parent", this);
    this.set("sections." + name, child);
    return this.emit("child", child);
  };

  /*
   bubbles up an event to the root object
  */


  DecorableView.prototype.bubble = function() {
    var _ref;
    this.emit.apply(this, arguments);
    return (_ref = this._parent) != null ? _ref.bubble.apply(_ref, arguments) : void 0;
  };

  /*
  */


  DecorableView.prototype._onRender = function() {};

  DecorableView.prototype._onRendered = function() {
    return this._rendered = true;
  };

  /*
  */


  DecorableView.prototype._onRemove = function() {};

  DecorableView.prototype._onRemoved = function() {
    this._removed = true;
    return this.dispose();
  };

  /*
   expose this so third-party modules can add a decorator
  */


  DecorableView.addDecoratorClass = DecorFactory.addDecoratorClass;

  return DecorableView;

})(Inheritable);

module.exports = DecorableView;
