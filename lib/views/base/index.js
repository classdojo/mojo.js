// Generated by CoffeeScript 1.6.3
var DecorableView, Inheritable, Janitor, generateId, loaf, protoclass, type,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

generateId = require("../../utils/idGenerator");

type = require("type-component");

loaf = require("loaf");

Inheritable = require("../../bindable/inheritable");

protoclass = require("protoclass");

Janitor = require("janitorjs");

/*
*/


DecorableView = (function(_super) {
  __extends(DecorableView, _super);

  /*
  */


  DecorableView.prototype.__isView = true;

  /*
  */


  DecorableView.prototype.define = ["sections", "states"];

  /*
  */


  function DecorableView(data, application) {
    var _ref, _ref1, _ref2, _ref3, _ref4;
    if (data == null) {
      data = {};
    }
    this.application = application;
    this._onApplication = __bind(this._onApplication, this);
    this._onParent = __bind(this._onParent, this);
    this.dispose = __bind(this.dispose, this);
    this.remove = __bind(this.remove, this);
    this.render = __bind(this.render, this);
    if (type(data) !== "object") {
      throw new Error("data passed in view must be an object");
    }
    DecorableView.__super__.constructor.call(this);
    this["this"] = this;
    this._id = (_ref = (_ref1 = (_ref2 = data._id) != null ? _ref2 : (_ref3 = data.model) != null ? typeof _ref3.get === "function" ? _ref3.get("_id") : void 0 : void 0) != null ? _ref1 : (_ref4 = data.model) != null ? _ref4._id : void 0) != null ? _ref : generateId();
    this._fresh = true;
    this.initialize();
    this.reset(data);
  }

  /*
  */


  DecorableView.prototype.initialize = function() {};

  /*
   resets the view - this should be called only after disposing
  */


  DecorableView.prototype.reset = function(data) {
    if (data == null) {
      data = {};
    }
    if (!this._fresh) {
      throw new Error("can only reset a view that has has been disposed");
    }
    this._fresh = false;
    this.set(data);
    this.bind("application").to(this._onApplication).now();
    return this.bind("parent").to(this._onParent).now();
  };

  /*
   returns path to this view. Useful for debugging.
  */


  DecorableView.prototype.path = function() {
    var cp, path;
    path = [];
    cp = this;
    while (cp) {
      path.unshift(cp.constructor.name);
      cp = cp.parent;
    }
    return path.join(".");
  };

  /*
  */


  DecorableView.prototype.render = function() {
    if (this.section) {
      return this.section;
    }
    this.section = loaf(this.application.nodeFactory);
    if (this._fresh) {
      this.reset();
    }
    if (!this._decorated) {
      this.application.decorators.decorate(this);
    }
    this.emit("render");
    return this.section;
  };

  /*
   removes the section
  */


  DecorableView.prototype.remove = function() {
    if (this.section) {
      this.emit("remove");
      this.section.dispose();
      return this.section = void 0;
    }
  };

  /*
   returns a search for a particular element
  */


  DecorableView.prototype.$ = function(search) {
    var el, _ref;
    el = $((_ref = this.section) != null ? _ref.getChildNodes() : void 0);
    if (arguments.length) {
      return el.find(search);
    }
    return el;
  };

  /*
   attaches to an element to the DOM
  */


  DecorableView.prototype.attach = function(element) {
    return (element[0] || element).appendChild(this.render().toFragment());
  };

  /*
  */


  DecorableView.prototype.setChild = function(name, child) {
    var _this = this;
    child.set("parent", this);
    this.set("sections." + name, child);
    return child.once("dispose", function() {
      child.set("parent", void 0);
      return _this.set("child." + name, void 0);
    });
  };

  /*
  */


  DecorableView.prototype.decorate = function(options) {
    this.__decorators = void 0;
    this.application.decorators.decorate(this, options);
    return this;
  };

  /*
   destroys this view completely - does cleanup
   of all listeners
  */


  DecorableView.prototype.dispose = function() {
    this.remove();
    this._fresh = true;
    this._decorated = false;
    return DecorableView.__super__.dispose.call(this);
  };

  /*
   bubbles up an event to the root object
  */


  DecorableView.prototype.bubble = function() {
    var _ref;
    this.emit.apply(this, arguments);
    return (_ref = this.parent) != null ? _ref.bubble.apply(_ref, arguments) : void 0;
  };

  /*
   listen when the parent is removed
  */


  DecorableView.prototype._onParent = function(parent) {
    var _ref, _ref1;
    if ((_ref = this._parentRemoveListener) != null) {
      _ref.dispose();
    }
    if ((_ref1 = this._parentDisposeListener) != null) {
      _ref1.dispose();
    }
    if (!parent) {
      return;
    }
    this._inherit("application");
    this._parentRemoveListener = parent.on("remove", this.remove);
    return this._parentDisposeListener = parent.on("dispose", this.dispose);
  };

  /*
  */


  DecorableView.prototype._onApplication = function(application) {
    return this.set("models", application.models);
  };

  return DecorableView;

})(Inheritable);

module.exports = protoclass.setup(DecorableView);
