// Generated by CoffeeScript 1.6.3
var BaseView, BindableInheritableObject, loaf, models,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BindableInheritableObject = require("../../bindable/inheritable");

models = require("../../models");

loaf = require("loaf");

BaseView = (function(_super) {
  __extends(BaseView, _super);

  /*
  */


  BaseView.prototype.__isView = true;

  /*
  */


  BaseView.prototype.models = models;

  /*
  */


  function BaseView(data) {
    if (data == null) {
      data = {};
    }
    BaseView.__super__.constructor.call(this, data);
    this.set("models", models);
    this.section = loaf();
    this.init();
  }

  /*
  */


  BaseView.prototype.init = function() {};

  BaseView.prototype.load = function(next) {
    return next();
  };

  BaseView.prototype.render = function(next) {
    return next();
  };

  BaseView.prototype.display = function(next) {
    return next();
  };

  BaseView.prototype.remove = function(next) {
    return next();
  };

  return BaseView;

})(BindableInheritableObject);

module.exports = BaseView;
