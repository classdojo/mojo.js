// Generated by CoffeeScript 1.6.2
(function() {
  var DecorableView, generateId, janitor, loaf, protoclass, runlater, subindable, type,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  generateId = require("../../utils/idGenerator");

  type = require("type-component");

  loaf = require("loaf");

  subindable = require("subindable");

  protoclass = require("protoclass");

  janitor = require("janitorjs");

  runlater = require("runlater").global;

  /*
  */


  DecorableView = (function(_super) {
    __extends(DecorableView, _super);

    /*
    */


    DecorableView.prototype.__isView = true;

    /*
    */


    DecorableView.prototype.define = ["sections", "states"];

    /*
    */


    function DecorableView(data, application) {
      var _ref, _ref1, _ref2, _ref3, _ref4;

      this.application = application;
      this._disposeLater = __bind(this._disposeLater, this);
      this._removeLater = __bind(this._removeLater, this);
      this._onParent = __bind(this._onParent, this);
      DecorableView.__super__.constructor.call(this, this);
      this["this"] = this;
      if (data) {
        this._id = (_ref = (_ref1 = (_ref2 = data._id) != null ? _ref2 : (_ref3 = data.model) != null ? typeof _ref3.get === "function" ? _ref3.get("_id") : void 0 : void 0) != null ? _ref1 : (_ref4 = data.model) != null ? _ref4._id : void 0) != null ? _ref : generateId();
      } else {
        this._id = generateId();
      }
      this.initialize(data);
    }

    /*
    */


    DecorableView.prototype.disposable = function(disposable) {
      if (!this._janitor) {
        this._janitor = janitor();
      }
      return this._janitor.add(disposable);
    };

    /*
    */


    DecorableView.prototype.initialize = function(data) {
      var key;

      if (data) {
        for (key in data) {
          this[key] = data[key];
        }
      }
      return this.on("change:parent", this._onParent);
    };

    /*
     returns path to this view. Useful for debugging.
    */


    DecorableView.prototype.path = function() {
      var cp, path;

      path = [];
      cp = this;
      while (cp) {
        path.unshift(cp.constructor.name);
        cp = cp.parent;
      }
      return path.join(".");
    };

    /*
    */


    DecorableView.prototype.render = function() {
      if (this._rendered) {
        return this.section;
      }
      this._rendered = true;
      if (!this.section) {
        this.section = loaf(this.application.nodeFactory);
        this.models = this.application.models;
      }
      this._render(this.section);
      if (!this._decorated) {
        this._decorated = true;
        this.application.decorators.decorate(this, this.constructor.prototype);
      }
      this.emit("render");
      return this.section;
    };

    /*
    */


    DecorableView.prototype._render = function(section) {};

    /*
     removes the section
    */


    DecorableView.prototype.remove = function() {
      if (this._rendered) {
        this._rendered = false;
        this.emit("remove");
        if (!this.parent || this.parent._rendered) {
          return this.section.removeAll();
        }
      }
    };

    /*
     returns a search for a particular element
    */


    DecorableView.prototype.$ = function(search) {
      var el, _ref;

      el = $((_ref = this.section) != null ? _ref.getChildNodes() : void 0);
      if (arguments.length) {
        return el.find(search);
      }
      return el;
    };

    /*
     attaches to an element to the DOM
    */


    DecorableView.prototype.attach = function(element) {
      var frag,
        _this = this;

      frag = this.render().toFragment();
      if (process.browser) {
        return requestAnimationFrame(function() {
          return (element[0] || element).appendChild(frag);
        });
      } else {
        return (element[0] || element).appendChild(frag);
      }
    };

    /*
    */


    DecorableView.prototype.setChild = function(name, child) {
      var _this = this;

      child.set("parent", this);
      this.set("sections." + name, child);
      return child.once("dispose", function() {
        return _this.set("sections." + name, void 0);
      });
    };

    /*
    */


    DecorableView.prototype.decorate = function(options) {
      this.application.decorators.decorate(this, options);
      return this;
    };

    /*
     destroys this view completely - does cleanup
     of all listeners
    */


    DecorableView.prototype.dispose = function() {
      var _ref;

      this.remove();
      if ((_ref = this._janitor) != null) {
        _ref.dispose();
      }
      this._decorated = false;
      this.set("parent", void 0);
      return DecorableView.__super__.dispose.call(this);
    };

    /*
     bubbles up an event to the root object
    */


    DecorableView.prototype.bubble = function() {
      var _ref;

      this.emit.apply(this, arguments);
      return (_ref = this.parent) != null ? _ref.bubble.apply(_ref, arguments) : void 0;
    };

    /*
     listen when the parent is removed
    */


    DecorableView.prototype._onParent = function(parent) {
      var _ref, _ref1;

      if ((_ref = this._parentRemoveListener) != null) {
        _ref.dispose();
      }
      if ((_ref1 = this._parentDisposeListener) != null) {
        _ref1.dispose();
      }
      if (!parent) {
        return;
      }
      this.inherit("application");
      this._parentRemoveListener = parent.on("remove", this._removeLater);
      return this._parentDisposeListener = parent.on("dispose", this._disposeLater);
    };

    /*
    */


    DecorableView.prototype._removeLater = function() {
      var _this = this;

      return runlater(function() {
        return _this.remove();
      });
    };

    /*
    */


    DecorableView.prototype._disposeLater = function() {
      var _this = this;

      return runlater(function() {
        return _this.dispose();
      });
    };

    return DecorableView;

  })(subindable.Object);

  module.exports = protoclass.setup(DecorableView);

}).call(this);
