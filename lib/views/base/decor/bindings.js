// Generated by CoffeeScript 1.6.3
var BaseViewDecorator, BindingsDecorator, dref, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseViewDecorator = require("./base");

dref = require("dref");

BindingsDecorator = (function(_super) {
  __extends(BindingsDecorator, _super);

  function BindingsDecorator() {
    this.render = __bind(this.render, this);
    this.init = __bind(this.init, this);
    _ref = BindingsDecorator.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  BindingsDecorator.prototype.init = function() {
    BindingsDecorator.__super__.init.call(this);
    console.log("INIT");
    this.bindings = typeof this.options === "object" ? this.options : void 0;
    return this.view.once("render", this.render);
  };

  /*
  */


  BindingsDecorator.prototype.render = function() {
    if (this.bindings) {
      return this._setupExplicitBindings();
    }
  };

  /*
   explicit bindings are properties from & to properties of the view controller
  */


  BindingsDecorator.prototype._setupExplicitBindings = function() {
    var bindings, key, _results;
    bindings = this.bindings;
    _results = [];
    for (key in bindings) {
      _results.push(this._setupBinding(key, bindings[key]));
    }
    return _results;
  };

  /*
  */


  BindingsDecorator.prototype._setupBinding = function(property, to) {
    var oldTo, options,
      _this = this;
    options = {};
    if (typeof to === "function") {
      oldTo = to;
      to = function() {
        return oldTo.apply(_this.view, arguments);
      };
    }
    if (to.to) {
      options = to;
    } else {
      options = {
        to: to
      };
    }
    options.property = property;
    return this.view.bind(options).now();
  };

  return BindingsDecorator;

})(BaseViewDecorator);

BindingsDecorator.getOptions = function(view) {
  return view.bindings;
};

module.exports = BindingsDecorator;
