// Generated by CoffeeScript 1.6.3
var Section, dref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

dref = require("dref");

Section = (function(_super) {
  __extends(Section, _super);

  /*
  */


  function Section(sections, name, viewClass, options) {
    this.sections = sections;
    this.name = name;
    this.viewClass = viewClass;
    this._onDataChange = __bind(this._onDataChange, this);
    Section.__super__.constructor.call(this, options);
    this.on("change", this._onDataChange);
  }

  /*
  */


  Section.prototype.createFragment = function() {
    if (!this.view) {
      this.view = new this.viewClass(this);
      this.view._parent = this.sections.view;
      this.sections._initialized(this);
    }
    return this.view.section.toFragment();
  };

  /*
  */


  Section.prototype._onDataChange = function(key, value) {
    return console.log(key, value);
  };

  return Section;

})(require("bindable").Object);

module.exports = Section;
