// Generated by CoffeeScript 1.6.3
var InheritableObject, bindable, decor, _, _combineSuperProps, _getBindingKey,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bindable = require("bindable");

decor = require("bindable-decor");

_ = require("underscore");

_getBindingKey = function(key) {
  return key.split(".").shift();
};

_combineSuperProps = function(target, property) {
  var constructor, defined, p;
  constructor = target.constructor;
  if (!constructor.__combined) {
    constructor.__combined = {};
  }
  if (constructor.__combined[property]) {
    return;
  }
  constructor.__combined[property] = true;
  p = constructor.prototype;
  defined = [];
  while (p) {
    defined = (p.define || []).concat(defined);
    p = p.constructor.__super__;
  }
  return constructor.prototype[property] = target[property] = defined;
};

InheritableObject = (function(_super) {
  __extends(InheritableObject, _super);

  /*
  */


  InheritableObject.prototype.define = ["parent"];

  /*
  */


  function InheritableObject() {
    InheritableObject.__super__.constructor.call(this, this);
    this._defined = {};
    _combineSuperProps(this, "define");
    this._define.apply(this, this.define);
  }

  /*
  */


  InheritableObject.prototype.get = function(key) {
    var bindingKey, i, ret;
    ret = InheritableObject.__super__.get.call(this, key);
    if (ret != null) {
      return ret;
    }
    bindingKey;
    if (~(i = key.indexOf("."))) {
      bindingKey = key.slice(0, i);
    } else {
      bindingKey = key;
    }
    if (this[bindingKey] != null) {
      return;
    }
    this._inherit(bindingKey);
    return InheritableObject.__super__.get.call(this, key);
  };

  /*
  */


  InheritableObject.prototype._define = function() {
    var key, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      key = arguments[_i];
      _results.push(this._defined[key] = true);
    }
    return _results;
  };

  /*
  */


  InheritableObject.prototype._inherit = function(key) {
    var parentBinding, parentPropertyBinding, valueBinding,
      _this = this;
    if (this._defined[key]) {
      return;
    }
    this._defined[key] = true;
    parentPropertyBinding = void 0;
    parentBinding = void 0;
    parentBinding = this.bind("parent").to(function(parent) {
      if (parentPropertyBinding != null) {
        parentPropertyBinding.dispose();
      }
      return parentPropertyBinding = parent.bind(key).to(_this, key).now();
    }).now();
    valueBinding = this.bind(key).to(function(value) {
      var _ref;
      if (((_ref = _this.parent) != null ? _ref[key] : void 0) === value) {
        return;
      }
      valueBinding.dispose();
      if (parentPropertyBinding != null) {
        parentPropertyBinding.dispose();
      }
      return parentBinding != null ? parentBinding.dispose() : void 0;
    });
    valueBinding.now();
    if (this[key] == null) {
      console.warn("inherted property %s doesn't exist in %s", key, this.path());
    }
    return void 0;
  };

  return InheritableObject;

})(bindable.Object);

module.exports = InheritableObject;
