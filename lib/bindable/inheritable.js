// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["bindable"], function(bindable) {
  var InheritableObject, _ref;

  return InheritableObject = (function(_super) {
    __extends(InheritableObject, _super);

    function InheritableObject() {
      _ref = InheritableObject.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
     If the key doesn't exist, then inherit it from the parent
    */


    InheritableObject.prototype.get = function(key) {
      var binding, ret, _ref1,
        _this = this;

      ret = InheritableObject.__super__.get.call(this, key);
      if (ret == null) {
        ret = (_ref1 = this._parent) != null ? _ref1.get(key) : void 0;
        if (ret) {
          if (!this._parentBindings) {
            this._parentBindings = [];
          }
          this._parentBindings.push(binding = this._parent.bind(key).to(this, key).now());
          this.bind(key, function(value) {
            if (value === binding.value) {
              return;
            }
            binding.dispose();
            return _this._parentBindings.splice(_this._parentBindings.indexOf(binding), 1);
          });
        }
      }
      return ret;
    };

    /*
     bubbles up an event to the root object
    */


    InheritableObject.prototype.bubble = function() {
      var _ref1;

      this.emit.apply(this, arguments);
      return (_ref1 = this._parent) != null ? _ref1.bubble.apply(_ref1, arguments) : void 0;
    };

    /*
    */


    InheritableObject.prototype.dispose = function() {
      var binding, _i, _len, _ref1;

      InheritableObject.__super__.dispose.call(this);
      _ref1 = this._parentBindings != null;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        binding = _ref1[_i];
        binding.dispose();
      }
      return this._parentBindings = void 0;
    };

    /*
    */


    InheritableObject.prototype.linkChild = function() {
      var child, _i, _len;

      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        child = arguments[_i];
        child._parent = this;
      }
      return this;
    };

    return InheritableObject;

  })(bindable.Object);
});
