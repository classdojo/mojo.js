// Generated by CoffeeScript 1.6.2
(function() {
  var BaseViewDecorator, BindingsDecorator, dref, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseViewDecorator = require("./base");

  dref = require("dref");

  BindingsDecorator = (function(_super) {
    __extends(BindingsDecorator, _super);

    function BindingsDecorator() {
      _ref = BindingsDecorator.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    BindingsDecorator.prototype.init = function() {
      BindingsDecorator.__super__.init.call(this);
      return this.bindings = typeof this.options === "object" ? this.options : void 0;
    };

    /*
    */


    BindingsDecorator.prototype.load = function() {
      if (this.bindings) {
        return this._setupExplicitBindings();
      }
    };

    /*
     explicit bindings are properties from & to properties of the view controller
    */


    BindingsDecorator.prototype._setupExplicitBindings = function() {
      var bindings, key, _results;

      bindings = this.bindings;
      _results = [];
      for (key in bindings) {
        _results.push(this._setupBinding(key, bindings[key]));
      }
      return _results;
    };

    /*
    */


    BindingsDecorator.prototype._setupBinding = function(property, to) {
      var keyPart, keyParts, oldTo, options, _i, _len, _results,
        _this = this;

      keyParts = property.split(" ");
      options = {};
      if (typeof to === "function") {
        oldTo = to;
        to = function() {
          return oldTo.apply(_this.view, arguments);
        };
      }
      if (to.to) {
        options = to;
      } else {
        options = {
          to: to
        };
      }
      _results = [];
      for (_i = 0, _len = keyParts.length; _i < _len; _i++) {
        keyPart = keyParts[_i];
        options.property = keyPart;
        _results.push(this.view.bind(options).now());
      }
      return _results;
    };

    return BindingsDecorator;

  })(BaseViewDecorator);

  BindingsDecorator.getOptions = function(view) {
    return view.bindings;
  };

  module.exports = BindingsDecorator;

}).call(this);
