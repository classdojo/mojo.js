// Generated by CoffeeScript 1.6.2
(function() {
  var DecorCollection, bindable, flatstack,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  flatstack = require("flatstack");

  DecorCollection = (function(_super) {
    __extends(DecorCollection, _super);

    /*
    */


    function DecorCollection() {
      this._runOnce = __bind(this._runOnce, this);
      this._loadLateDecor = __bind(this._loadLateDecor, this);      DecorCollection.__super__.constructor.apply(this, arguments);
      this.enforceId(false);
      this._callstack = flatstack(this);
      this.on("insert", this._loadLateDecor);
      this._running = {};
    }

    /*
     Creates, and parses the DOM
    */


    DecorCollection.prototype.load = function(callback) {
      var _this = this;

      return this._runOnce("load", callback, function(callback) {
        return _this._call("load", "loaded", _this.source(), callback);
      });
    };

    /*
     attaches any controllers / bindings to the view (rivets)
    */


    DecorCollection.prototype.render = function(callback) {
      var _this = this;

      return this._runOnce("render", callback, function(callback) {
        return _this.load(function() {
          return _this._call("render", "rendered", _this.source(), callback);
        });
      });
    };

    /*
     adds the elements to the DOM - transitions happen here
    */


    DecorCollection.prototype.display = function(callback) {
      var _this = this;

      return this._runOnce("display", callback, function(callback) {
        return _this.render(function() {
          return _this._call("display", "displayed", _this.source(), callback);
        });
      });
    };

    /*
     removes & unloads the view
    */


    DecorCollection.prototype.remove = function(callback) {
      var _this = this;

      return this._runOnce("remove", callback, function(callback) {
        return _this.display(function() {
          return _this._call("remove", "removed", _this.source(), callback);
        });
      });
    };

    /*
    */


    DecorCollection.prototype.emit = function() {
      var _ref;

      DecorCollection.__super__.emit.apply(this, arguments);
      return (_ref = this.view) != null ? _ref.emit.apply(_ref, arguments) : void 0;
    };

    /*
    */


    DecorCollection.prototype._call = function(method, event, source, callback) {
      var done, src,
        _this = this;

      if (callback == null) {
        callback = (function() {});
      }
      this.emit("stateChange", method);
      if (this.get("currentState") !== method) {
        this.set("currentState", method);
        this.emit(method);
      }
      done = function() {
        return _this._callPending(method, event, callback);
      };
      src = source.concat().map(function(decor) {
        return {
          fn: decor[method] || _this._noFn,
          context: decor
        };
      });
      this._callstack.push.apply(this._callstack, src);
      return this._callstack.push(done);
    };

    /*
    */


    DecorCollection.prototype._noFn = function() {};

    /*
     calls any late decorators
    */


    DecorCollection.prototype._callPending = function(method, event, callback) {
      var pending;

      if (!this._pending) {
        this.set(event, true);
        this.emit(event);
        callback();
        return;
      }
      pending = this._pending;
      this._pending = void 0;
      return this._call(method, event, pending, callback);
    };

    /*
     used when a decorator is added a bit late - might happen
     for items such as states, lists, or dynamically loaded decor (child views)
    */


    DecorCollection.prototype._loadLateDecor = function(decorator) {
      if (!(this.has("currentState") || this.get("currentState") === "none")) {
        return;
      }
      if (this.get("displayed")) {
        if (typeof decorator.display === "function") {
          decorator.display();
        }
        return;
      }
      if (!this._pending) {
        this._pending = [];
      }
      return this._pending.push(decorator);
    };

    /*
     runs a function just once
    */


    DecorCollection.prototype._runOnce = function(key, callback, run) {
      var code, event,
        _this = this;

      if (!callback) {
        callback = function() {};
      }
      if ((code = this._running[key]) === 2) {
        return callback();
      }
      if (callback) {
        this.once((event = "__" + key), callback);
      }
      if (code) {
        return;
      }
      this._running[key] = 1;
      return run(function() {
        _this._running[key] = 2;
        return _this.emit(event);
      });
    };

    return DecorCollection;

  })(bindable.Collection);

  module.exports = DecorCollection;

}).call(this);
