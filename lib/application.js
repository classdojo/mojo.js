// Generated by CoffeeScript 1.6.3
var Application, BaseView, bindable, decorators, defaultComponents, paperclip, type, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

bindable = require("bindable");

_ = require("underscore");

type = require("type-component");

paperclip = require("mojo-paperclip");

BaseView = require("./views/base");

defaultComponents = require("./plugins/defaultComponents");

decorators = require("./plugins/decor");

/*
 Main entry point for mojo applications


 app = new Application()

 app.use(router)
 app.use(mediator)

 app.
  registerClass("mainView", MainView).
  createObject("mainView").
  attach($("#application"))
*/


Application = (function(_super) {
  __extends(Application, _super);

  /*
  */


  function Application() {
    Application.__super__.constructor.call(this, this);
    this.models = new bindable.Object();
    this.use(defaultComponents);
    this.use(decorators);
    this.use(paperclip);
    this.registerViewClass("base", BaseView);
  }

  /*
  */


  Application.prototype.use = function() {
    var module, modules, _i, _len;
    modules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = modules.length; _i < _len; _i++) {
      module = modules[_i];
      module(this);
    }
    return this;
  };

  /*
  */


  Application.prototype.registerClass = function(name, clazz) {
    this.set("models.classes." + name, clazz);
    return this;
  };

  /*
  */


  Application.prototype.registerViewClass = function(name, clazz) {
    return this.registerClass("views." + name, clazz);
  };

  Application.prototype.registerModelClass = function(name, clazz) {
    return this.registerClass("models." + name, clazz);
  };

  Application.prototype.getViewClass = function(name) {
    return this.getClass("views." + name);
  };

  Application.prototype.getModelClass = function(name) {
    return this.getClass("models." + name);
  };

  Application.prototype.getClass = function(name) {
    return this.get("models.classes." + name);
  };

  /*
  */


  Application.prototype.createObject = function(name, options) {
    var clazz, obj;
    if (options == null) {
      options = {};
    }
    if (type(name) === "function") {
      clazz = name;
    } else {
      clazz = this.get("models.classes." + name);
      if (!clazz) {
        throw new Error("class '" + name + "' doesn't exist");
      }
    }
    obj = new clazz(options, this);
    return obj;
  };

  /*
  */


  Application.prototype.createView = function(name, options) {
    return this.createObject("views." + name, options);
  };

  Application.prototype.createModel = function(name, options) {
    return this.createObject("models." + name, options);
  };

  return Application;

})(bindable.Object);

module.exports = Application;
