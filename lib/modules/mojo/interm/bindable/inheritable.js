


define(["require", "bindable"], function(require) {

    var __dirname = "modules/mojo/interm/bindable",
    __filename    = "modules/mojo/interm/bindable/inheritable.js",
    module        = { exports: {} },
    exports       = module.exports,
    define        = undefined,
    window        = exports,
    global        = window;

    

    // Generated by CoffeeScript 1.6.2
(function() {
  var InheritableObject, bindable, _getBindingKey, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  _getBindingKey = function(key) {
    return key.split(".").shift();
  };

  InheritableObject = (function(_super) {
    __extends(InheritableObject, _super);

    function InheritableObject() {
      _ref = InheritableObject.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
     If the key doesn't exist, then inherit it from the parent
    */


    InheritableObject.prototype.get = function(key) {
      var _ref1;

      return (_ref1 = InheritableObject.__super__.get.call(this, key)) != null ? _ref1 : this._inherit(key);
    };

    /*
     inherits a property from the parent
    */


    InheritableObject.prototype._inherit = function(key) {
      var binding, bindingKey, ret, _ref1, _ref2, _ref3,
        _this = this;

      bindingKey = _getBindingKey(key);
      ret = InheritableObject.__super__.get.call(this, bindingKey);
      if (ret != null) {
        return void 0;
      }
      if (this._parent && !((_ref1 = this._parentBindings) != null ? _ref1[bindingKey] : void 0)) {
        if (!this._parentBindings) {
          this._parentBindings = {};
        }
        if ((_ref2 = this._parentBindings[bindingKey]) != null) {
          _ref2.dispose();
        }
        this._parentBindings[bindingKey] = binding = this._parent.bind(bindingKey).to(this, bindingKey);
        this._parentBindings[bindingKey].now();
        this.bind(bindingKey, function(value) {
          if (value === binding.value) {
            return;
          }
          binding.dispose();
          return delete _this._parentBindings[bindingKey];
        });
      }
      return (_ref3 = this._parent) != null ? _ref3.get(key) : void 0;
    };

    /*
    */


    InheritableObject.prototype._set = function(key, value) {
      this._inherit(key);
      return InheritableObject.__super__._set.call(this, key, value);
    };

    /*
     finds the owner of a given property
    */


    InheritableObject.prototype.owner = function(property) {
      return this._owner(_getBindingKey(property), this);
    };

    /*
    */


    InheritableObject.prototype._owner = function(property, caller) {
      var _ref1;

      if (this._parent && ((_ref1 = this._parentBindings) != null ? _ref1[property] : void 0)) {
        return this._parent.owner(property, caller);
      }
      if (InheritableObject.__super__.get.call(this, property) != null) {
        return this;
      }
      return caller;
    };

    /*
     bubbles up an event to the root object
    */


    InheritableObject.prototype.bubble = function() {
      var _ref1;

      this.emit.apply(this, arguments);
      return (_ref1 = this._parent) != null ? _ref1.bubble.apply(_ref1, arguments) : void 0;
    };

    /*
    */


    InheritableObject.prototype.dispose = function() {
      var binding, _i, _len, _ref1;

      InheritableObject.__super__.dispose.call(this);
      _ref1 = this._parentBindings != null;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        binding = _ref1[_i];
        binding.dispose();
      }
      return this._parentBindings = void 0;
    };

    /*
    */


    InheritableObject.prototype.linkChild = function() {
      var child, _i, _len;

      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        child = arguments[_i];
        child._parent = this;
      }
      return this;
    };

    return InheritableObject;

  })(bindable.Object);

  module.exports = InheritableObject;

}).call(this);


    return module.exports;
});