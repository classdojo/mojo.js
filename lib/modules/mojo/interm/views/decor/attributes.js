


define(["require", "disposable", "modules/mojo/interm/views/decor/base"], function(require) {

    var __dirname = "modules/mojo/interm/views/decor",
    __filename    = "modules/mojo/interm/views/decor/attributes.js",
    module        = { exports: {} },
    exports       = module.exports,
    define        = undefined,
    window        = exports,
    global        = window;

    

    // Generated by CoffeeScript 1.6.2
(function() {
  var AttributesDecorator, BaseDecorator, disposable, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  disposable = require("disposable");

  BaseDecorator = require("modules/mojo/interm/views/decor/base");

  AttributesDecorator = (function(_super) {
    __extends(AttributesDecorator, _super);

    function AttributesDecorator() {
      _ref = AttributesDecorator.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    AttributesDecorator.prototype.init = function() {
      AttributesDecorator.__super__.init.call(this);
      return this.attrs = this.options;
    };

    /*
    */


    AttributesDecorator.prototype.render = function() {
      var key, props, _i, _len, _ref1, _results;

      _ref1 = this._properties();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        props = _ref1[_i];
        _results.push((function() {
          var _results1;

          _results1 = [];
          for (key in props.attributes) {
            _results1.push(props.element.attr(key, props.attributes[key]));
          }
          return _results1;
        })());
      }
      return _results;
    };

    /*
    */


    AttributesDecorator.prototype._properties = function() {
      var attrElement, attrs, elements, selector, _results;

      attrs = this.attrs;
      attrElement = this._targetElement();
      if (typeof this._firstValue(attrs) !== "object") {
        return [
          {
            element: attrElement,
            attributes: attrs
          }
        ];
      }
      elements = [];
      _results = [];
      for (selector in attrs) {
        _results.push(elements.push({
          element: attrElement.find(selector),
          attributes: attrs[selector]
        }));
      }
      return _results;
    };

    /*
    */


    AttributesDecorator.prototype._firstValue = function(attrs) {
      var key;

      for (key in attrs) {
        return attrs[key];
      }
    };

    /*
    */


    AttributesDecorator.prototype._targetElement = function() {
      return this.view.$();
    };

    return AttributesDecorator;

  })(BaseDecorator);

  AttributesDecorator.getOptions = function(view) {
    return view.attributes;
  };

  module.exports = AttributesDecorator;

}).call(this);


    return module.exports;
});