


define(["require", "modules/mojo/interm/views/collection", "modules/mojo/interm/views/decor/sections/child/index", "modules/mojo/interm/views/decor/sections/list/index", "modules/mojo/interm/views/decor/sections/states/index"], function(require) {

    var __dirname = "modules/mojo/interm/views/decor/sections",
    __filename    = "modules/mojo/interm/views/decor/sections/index.js",
    module        = { exports: {} },
    exports       = module.exports,
    define        = undefined,
    window        = exports,
    global        = window;

    

    // Generated by CoffeeScript 1.6.2
(function() {
  var ChildSection, ListSection, SectionDecorator, StatesSection, ViewCollection, availableSectionClasses;

  ViewCollection = require("modules/mojo/interm/views/collection");

  ChildSection = require("modules/mojo/interm/views/decor/sections/child/index");

  StatesSection = require("modules/mojo/interm/views/decor/sections/list/index");

  ListSection = require("modules/mojo/interm/views/decor/sections/states/index");

  availableSectionClasses = [ChildSection, StatesSection, ListSection];

  SectionDecorator = (function() {
    /*
    */
    function SectionDecorator(view, sectionOptions) {
      this.view = view;
      this.sectionOptions = sectionOptions;
      this.init();
    }

    /*
    */


    SectionDecorator.prototype.init = function() {
      var sectionName, _results;

      this._sections = this.source = new ViewCollection();
      this.view.set("sections", this);
      _results = [];
      for (sectionName in this.sectionOptions) {
        _results.push(this._addSection(sectionName, this.sectionOptions[sectionName]));
      }
      return _results;
    };

    /*
    */


    SectionDecorator.prototype.load = function(next) {
      return this._sections.load(next);
    };

    SectionDecorator.prototype.render = function(next) {
      return this._sections.render(next);
    };

    SectionDecorator.prototype.display = function(next) {
      var section, _i, _len, _ref;

      _ref = this._sections.source();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        if (!section.rendered) {
          console.warn("view '" + (this.view.path()) + "' has no section outlet for 'sections." + section.name + "'");
        }
      }
      return this._sections.display(next);
    };

    SectionDecorator.prototype.remove = function(next) {
      return this._sections.remove(next);
    };

    /*
    */


    SectionDecorator.prototype._addSection = function(name, options) {
      var section, sectionClass;

      sectionClass = this._findSectionClass(options);
      if (!sectionClass) {
        return;
      }
      section = new sectionClass(this.view, name, options);
      this.view.set("sections." + name, section);
      return this._sections.push(section);
    };

    /*
    */


    SectionDecorator.prototype._findSectionClass = function(options) {
      var sectionClass, _i, _len;

      for (_i = 0, _len = availableSectionClasses.length; _i < _len; _i++) {
        sectionClass = availableSectionClasses[_i];
        if (sectionClass.test(options)) {
          return sectionClass;
        }
      }
    };

    SectionDecorator.getOptions = function(view) {
      return view.sections;
    };

    return SectionDecorator;

  })();

  module.exports = SectionDecorator;

}).call(this);


    return module.exports;
});