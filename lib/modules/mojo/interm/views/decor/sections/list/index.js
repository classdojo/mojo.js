


define(["require", "modules/mojo/interm/views/collection", "modules/mojo/interm/views/adapters/index", "dref", "hoist", "pilot-block", "bindable", "type-component", "modules/mojo/interm/factories/fn", "modules/mojo/interm/factories/class"], function(require) {

    var __dirname = "modules/mojo/interm/views/decor/sections/list",
    __filename    = "modules/mojo/interm/views/decor/sections/list/index.js",
    module        = { exports: {} },
    exports       = module.exports,
    define        = undefined,
    window        = exports,
    global        = window;

    

    // Generated by CoffeeScript 1.6.2
(function() {
  var ClassFactory, FnFactory, ListSection, ViewCollection, adapters, bindable, dref, hoist, pilot, type,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ViewCollection = require("modules/mojo/interm/views/collection");

  adapters = require("modules/mojo/interm/views/adapters/index");

  dref = require("dref");

  hoist = require("hoist");

  pilot = require("pilot-block");

  bindable = require("bindable");

  type = require("type-component");

  FnFactory = require("modules/mojo/interm/factories/fn");

  ClassFactory = require("modules/mojo/interm/factories/class");

  ListSection = (function(_super) {
    __extends(ListSection, _super);

    function ListSection(view, name, options) {
      this.view = view;
      this.name = name;
      this.options = options;
      this._removeModelView = __bind(this._removeModelView, this);
      this._insertDeferredSections = __bind(this._insertDeferredSections, this);
      this._hookModelView = __bind(this._hookModelView, this);
      this._onSourceChange = __bind(this._onSourceChange, this);
      ListSection.__super__.constructor.call(this);
      this.__source = this.options.source;
      this._viewCollection = this.modelViews = new ViewCollection();
      this._viewCollection.bind({
        remove: this._removeModelView
      }).now();
      this._deferredSections = [];
      this.section = pilot.createSection();
      this._viewCollection.bind("length").to(this, "length");
    }

    /*
    */


    ListSection.prototype.toString = function() {
      this.rendered = true;
      return this.section.toString();
    };

    ListSection.prototype.load = function(next) {
      var _this = this;

      this.initList();
      return this._fetchRemote(function() {
        return _this._viewCollection.load(next);
      });
    };

    /*
    */


    ListSection.prototype._fetchRemote = function(next) {
      var _ref, _ref1;

      if (!((_ref = this._sourceCollection) != null ? _ref.fetch : void 0)) {
        return next();
      }
      return (_ref1 = this._sourceCollection) != null ? _ref1.fetch(next) : void 0;
    };

    /*
    */


    ListSection.prototype.render = function(next) {
      return this._viewCollection.render(next);
    };

    /*
    */


    ListSection.prototype.display = function(next) {
      return this._viewCollection.display(next);
    };

    /*
    */


    ListSection.prototype.remove = function(next) {
      var _ref;

      if ((_ref = this._sourceBinding) != null) {
        _ref.dispose();
      }
      this._sourceBinding = void 0;
      return this._viewCollection.remove(next);
    };

    /*
    */


    ListSection.prototype.initList = function() {
      var hoister, map, modelViewFactory,
        _this = this;

      hoister = hoist();
      map = this.options.map || this.options.transform;
      modelViewFactory = this.options.modelViewFactory || new ClassFactory(adapters.getViewClass(this.options.modelViewClass));
      if (type(modelViewFactory) === "function") {
        modelViewFactory = new FnFactory(modelViewFactory);
      }
      if (map) {
        hoister.map(function(model) {
          return map(model, _this);
        });
      }
      this._modelTransformer = hoister.map(function(model) {
        var ops;

        ops = {};
        ops.model = model;
        ops._id = dref.get(model, "_id");
        return ops;
      }).map(function(options) {
        var view;

        view = modelViewFactory.create(options);
        _this._hookModelView(view);
        return view;
      });
      return this._bindSource();
    };

    /*
    */


    ListSection.prototype._onSourceChange = function(source) {
      var binding, _ref,
        _this = this;

      this._viewCollection.source([]);
      this._deferredSections = [];
      this._sourceCollection = adapters.getCollection(source);
      if ((_ref = this._sourceBinding) != null) {
        _ref.dispose();
      }
      this._sourceBinding = binding = this._sourceCollection.bind();
      this._sourceBinding.filter(function(model) {
        if (!_this.options.filter) {
          return true;
        }
        _this._watchModelChanges(model);
        return _this._filter(model);
      });
      binding.map(this._modelTransformer).to(this._viewCollection).now();
      return this._watchViewChanges();
    };

    /*
    */


    ListSection.prototype._bindSource = function() {
      if (!this.__source) {
        return;
      }
      if (typeof this.__source === "string") {
        return this._bindSourceString();
      } else {
        return this._bindSourceInst();
      }
    };

    /*
    */


    ListSection.prototype._bindSourceString = function() {
      return this.view.bind(this.__source, this._onSourceChange).now();
    };

    /*
    */


    ListSection.prototype._bindSourceInst = function() {
      return this._onSourceChange(this.__source);
    };

    /*
    */


    ListSection.prototype._hookModelView = function(modelView) {
      var self;

      self = this;
      this.view.linkChild(modelView);
      modelView.decorators.push({
        load: function(next) {
          if (self._loaded) {
            self._deferInsert(modelView.section);
          } else {
            self.section.append(modelView.section);
          }
          return next();
        }
      });
      return modelView;
    };

    /*
    */


    ListSection.prototype._watchModelChanges = function(model) {
      var onChange, removeListener,
        _this = this;

      if (!this.options.filter) {
        return;
      }
      removeListener = function() {
        return model.removeListener("change", onChange);
      };
      return model.on("change", onChange = function() {
        return _this._refilter([model]);
      });
    };

    /*
    */


    ListSection.prototype._watchViewChanges = function() {
      var property, _i, _len, _ref, _results,
        _this = this;

      if (this._watchingViewChanges) {
        return;
      }
      if (!this.options.bind || !this.options.filter) {
        return;
      }
      this._watchingViewChanges = true;
      _ref = this.options.bind;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        _results.push((function(property) {
          return _this.view.bind(property).to(function() {
            return _this._refilter(_this._sourceCollection.source());
          });
        })(property));
      }
      return _results;
    };

    /*
    */


    ListSection.prototype._refilter = function(models) {
      var containsModel, model, modelIndex, useModel, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        useModel = !!this._filter(model);
        modelIndex = this._viewCollection.indexOf({
          _id: model.get("_id")
        });
        containsModel = !!~modelIndex;
        if (useModel === containsModel) {
          continue;
        }
        if (useModel) {
          _results.push(this._viewCollection.push(this._modelTransformer(model)));
        } else {
          _results.push(this._viewCollection.splice(modelIndex, 1));
        }
      }
      return _results;
    };

    /*
    */


    ListSection.prototype._filter = function(model) {
      return this.options.filter.call(this.view, model);
    };

    /*
    */


    ListSection.prototype._deferInsert = function(section) {
      this._deferredSections.push(section);
      return this._deferInsert2();
    };

    /*
    */


    ListSection.prototype._deferInsert2 = function() {
      clearTimeout(this._deferInsertTimeout);
      return this._deferInsertTimeout = setTimeout(this._insertDeferredSections, 0);
    };

    /*
    */


    ListSection.prototype._insertDeferredSections = function() {
      var _ref;

      (_ref = this.section).append.apply(_ref, this._deferredSections);
      return this._deferredSections = [];
    };

    /*
    */


    ListSection.prototype._removeModelView = function(modelView) {
      if (!modelView) {
        return;
      }
      return modelView.remove();
    };

    ListSection.test = function(options) {
      return options.type === "list";
    };

    return ListSection;

  })(bindable.Object);

  module.exports = ListSection;

}).call(this);


    return module.exports;
});