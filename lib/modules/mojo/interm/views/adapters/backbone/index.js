


define(["require", "modules/mojo/interm/views/adapters/base/index", "modules/mojo/interm/views/adapters/backbone/view", "modules/mojo/interm/views/adapters/backbone/collection", "modules/mojo/interm/views/adapters/backbone/model"], function(require) {

    var __dirname = "modules/mojo/interm/views/adapters/backbone",
    __filename    = "modules/mojo/interm/views/adapters/backbone/index.js",
    module        = { exports: {} },
    exports       = module.exports,
    define        = undefined,
    window        = exports,
    global        = window;

    

    // Generated by CoffeeScript 1.6.2
(function() {
  var BackboneAdapter, BackboneWrapperCollection, BackboneWrapperModel, BackboneWrapperView, BaseAdapter, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseAdapter = require("modules/mojo/interm/views/adapters/base/index");

  BackboneWrapperView = require("modules/mojo/interm/views/adapters/backbone/view");

  BackboneWrapperCollection = require("modules/mojo/interm/views/adapters/backbone/collection");

  BackboneWrapperModel = require("modules/mojo/interm/views/adapters/backbone/model");

  BackboneAdapter = (function(_super) {
    __extends(BackboneAdapter, _super);

    function BackboneAdapter() {
      _ref = BackboneAdapter.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    BackboneAdapter.prototype.getModel = function(value) {
      if (!value.idAttribute) {
        return false;
      }
      return new BackboneWrapperModel(value);
    };

    /*
    */


    BackboneAdapter.prototype.getCollection = function(value) {
      if (!value._byId || !value.models) {
        return false;
      }
      return new BackboneWrapperCollection(value);
    };

    /*
    */


    BackboneAdapter.prototype.getViewClass = function(clazz) {
      var proto, _ref1;

      proto = clazz.prototype;
      if (!proto.tagName || !proto.$) {
        return false;
      }
      return (function(_super1) {
        __extends(_Class, _super1);

        function _Class() {
          _ref1 = _Class.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        _Class.prototype.viewClass = clazz;

        return _Class;

      })(BackboneWrapperView);
    };

    return BackboneAdapter;

  })(BaseAdapter);

  module.exports = BackboneAdapter;

}).call(this);


    return module.exports;
});