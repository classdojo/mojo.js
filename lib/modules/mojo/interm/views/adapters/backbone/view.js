


define(["require", "modules/mojo/interm/views/internal"], function(require) {

    var __dirname = "modules/mojo/interm/views/adapters/backbone",
    __filename    = "modules/mojo/interm/views/adapters/backbone/view.js",
    module        = { exports: {} },
    exports       = module.exports,
    define        = undefined,
    window        = exports,
    global        = window;

    

    // Generated by CoffeeScript 1.6.2
(function() {
  var BackboneWrapperView, InternalView, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InternalView = require("modules/mojo/interm/views/internal");

  BackboneWrapperView = (function(_super) {
    __extends(BackboneWrapperView, _super);

    function BackboneWrapperView() {
      _ref = BackboneWrapperView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    BackboneWrapperView.prototype.init = function() {
      var model, view, _ref1,
        _this = this;

      BackboneWrapperView.__super__.init.call(this);
      model = (_ref1 = this.get("model").model) != null ? _ref1 : this.get("model");
      view = null;
      return this.decorators.push({
        load: function(next) {
          var method, _fn, _i, _len, _ref2;

          view = new _this.viewClass({
            model: model
          });
          _ref2 = ["emit", "bubble"];
          _fn = function(method) {
            return view[method] = function() {
              return _this[method].apply(_this, arguments);
            };
          };
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            method = _ref2[_i];
            _fn(method);
          }
          return view.render(function() {
            _this.section.append(view.el);
            return next();
          });
        },
        render: function(next) {
          view.el = $(_this.section.elements);
          view.delegateEvents();
          return next();
        },
        display: function(next) {
          return next();
        },
        remove: function(next) {
          return next();
        }
      });
    };

    return BackboneWrapperView;

  })(InternalView);

  module.exports = BackboneWrapperView;

}).call(this);


    return module.exports;
});