// Generated by CoffeeScript 1.6.2
(function() {
  var SectionsDecorator, type;

  type = require("type-component");

  SectionsDecorator = (function() {
    /*
    */
    function SectionsDecorator(view, sectionOptions) {
      this.view = view;
      this.sectionOptions = sectionOptions;
      this.view.sections = {};
      this.init();
      this.view.sections.__decorated = true;
    }

    /*
    */


    SectionsDecorator.prototype.init = function() {
      var sectionName, _results;

      _results = [];
      for (sectionName in this.sectionOptions) {
        _results.push(this._addSection(sectionName, this._fixOptions(this.sectionOptions[sectionName], sectionName)));
      }
      return _results;
    };

    /*
    */


    SectionsDecorator.prototype._addSection = function(name, options) {
      var view;

      view = this._createSectionView(options);
      view.once("render", function() {
        return view.decorate(options);
      });
      return this.view.setChild(name, view);
    };

    /*
    */


    SectionsDecorator.prototype._fixOptions = function(options, sectionName) {
      if (!options) {
        throw new Error("'sections' is invalid for view " + (this.view.path()));
      }
      if (!options.type) {
        options = {
          type: options
        };
      }
      return options;
    };

    /*
    */


    SectionsDecorator.prototype._createSectionView = function(options) {
      var t;

      if ((t = type(options.type)) === "object") {
        return options.type;
      }
      if (t === "function") {
        return new options.type(options);
      } else if (t === "string") {
        return this.view.application.createView(options.type, options);
      } else {
        throw new Error("cannot create section for type " + t);
      }
    };

    /*
    */


    SectionsDecorator.priority = "display";

    SectionsDecorator.getOptions = function(view) {
      if (view.sections && !view.sections.__decorated) {
        return view.sections;
      } else {
        return void 0;
      }
    };

    SectionsDecorator.decorate = function(view, options) {
      return new SectionsDecorator(view, options);
    };

    return SectionsDecorator;

  })();

  module.exports = SectionsDecorator;

}).call(this);
