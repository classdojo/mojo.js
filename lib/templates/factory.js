// Generated by CoffeeScript 1.6.2
define(["require", "./template", "asyngleton", "underscore", "./engines/handlebars"], function(require, Template, asyngleton, _, Handlebars) {
  var TemplateFactory, mainFactory;

  TemplateFactory = (function() {
    /*
    */
    function TemplateFactory(options) {
      if (options == null) {
        options = {};
      }
      this._engine = options.engine || "handlebars";
      this._directory = options.directory || "/templates";
      this._extension = options.extension;
      this._templates = {};
      this._loadedEngines = {};
      this.plugins = [];
    }

    /*
     Sets the target template engine
    */


    TemplateFactory.prototype.engine = function(value) {
      if (!arguments.length) {
        return this._engine;
      }
      return this._engine = value;
    };

    /*
    */


    TemplateFactory.prototype.use = function(plugin) {
      return this.plugins.push(plugin);
    };

    /*
    */


    TemplateFactory.prototype.directory = function(value) {
      if (!arguments.length) {
        return this._directory;
      }
      return this._directroy = value;
    };

    /*
    */


    TemplateFactory.prototype.fromSource = function(source, options) {
      if (options == null) {
        options = {};
      }
      options.source = source;
      return this.get(source, options);
    };

    /*
    */


    TemplateFactory.prototype.loadEngine = function(name, callback) {
      return callback(null, this._loadedEngines[name] || (this._loadedEngines[name] = new Handlebars(this)));
    };

    /*
    */


    TemplateFactory.prototype.get = function(name, options) {
      if (options == null) {
        options = {};
      }
      _.defaults(options, {
        engine: this._engine,
        directory: this._directory,
        extension: this._extension,
        plugins: this.plugins,
        factory: this,
        name: name
      });
      return this._templates[name] || (this._templates[name] = new Template(options));
    };

    return TemplateFactory;

  })();
  mainFactory = new TemplateFactory();
  TemplateFactory.fromSource = function() {
    return mainFactory.fromSource.apply(mainFactory, arguments);
  };
  return TemplateFactory;
});
